package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// sendRoleSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.
func sendRoleSelection(chatID int64, bot *tgbotapi.BotAPI) {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°—Ç—É–¥–µ–Ω—Ç", "role_student"),
		tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "role_teacher"),
	))

	// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "cancel_process"),
	))

	msg := tgbotapi.NewMessage(chatID, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	sendAndTrackMessage(bot, msg)
}

// sendFacultySelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
func sendFacultySelection(chatID int64, bot *tgbotapi.BotAPI) {
	facs := GetFaculties()
	if len(facs) == 0 {
		var err error
		facs, err = GetAllFaculties()
		if err != nil || len(facs) == 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
			sendAndTrackMessage(bot, msg)
			return
		}
		SetFaculties(facs)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, f := range facs {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(f, f),
		)
		rows = append(rows, row)
	}

	// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "cancel_process"),
	))

	msg := tgbotapi.NewMessage(chatID, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	sendAndTrackMessage(bot, msg)
}

// sendGroupSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
func sendGroupSelection(chatID int64, facultyName string, bot *tgbotapi.BotAPI) {
	groups := GetGroups(facultyName)
	if len(groups) == 0 {
		var err error
		groups, err = GetGroupsByFaculty(facultyName)
		if err != nil || len(groups) == 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ "+facultyName+".")
			sendAndTrackMessage(bot, msg)
			return
		}
		SetGroups(facultyName, groups)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, g := range groups {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(g, g),
		)
		rows = append(rows, row)
	}

	// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "cancel_process"),
	))

	msg := tgbotapi.NewMessage(chatID, "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	sendAndTrackMessage(bot, msg)
}

// GetCoursesByTeacherID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—ë—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º teacherID.
// –ï—Å–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–∞–∑–Ω—ã–º –≥—Ä—É–ø–ø–∞–º, –∫—É—Ä—Å –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
func GetCoursesByTeacherID(teacherID int64) ([]models.Course, error) {
	rows, err := db.DB.Query(`
		SELECT c.id, c.name
		FROM teacher_course_groups tcg
		JOIN courses c ON c.id = tcg.course_id
		WHERE tcg.teacher_id = ?
		GROUP BY c.id, c.name
	`, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var courses []models.Course
	for rows.Next() {
		var course models.Course
		if err := rows.Scan(&course.ID, &course.Name); err != nil {
			return nil, err
		}
		courses = append(courses, course)
	}
	return courses, nil
}

// GetTeacherGroups –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–≤—è–∑–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ teacher_course_groups.
func GetTeacherGroups(teacherRegCode string) ([]models.TeacherCourseGroup, error) {
	rows, err := db.DB.Query(`
		SELECT id, teacher_reg_code, course_id, group_name
		FROM teacher_course_groups
		WHERE teacher_reg_code = ?
	`, teacherRegCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var groups []models.TeacherCourseGroup
	for rows.Next() {
		var tg models.TeacherCourseGroup
		if err := rows.Scan(&tg.ID, &tg.TeacherRegCode, &tg.CourseID, &tg.GroupName); err != nil {
			return nil, err
		}
		groups = append(groups, tg)
	}
	return groups, nil
}

// –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –∫–æ–¥—É
func GetTeacherGroupsByRegCode(teacherRegCode string) ([]models.TeacherCourseGroup, error) {
	rows, err := db.DB.Query(`
        SELECT id, teacher_reg_code, course_id, group_name
        FROM teacher_course_groups
        WHERE teacher_reg_code = ?
    `, teacherRegCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var groups []models.TeacherCourseGroup
	for rows.Next() {
		var tg models.TeacherCourseGroup
		if err := rows.Scan(&tg.ID, &tg.TeacherRegCode, &tg.CourseID, &tg.GroupName); err != nil {
			return nil, err
		}
		groups = append(groups, tg)
	}
	return groups, nil
}

// –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –∫–æ–¥—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func GetCoursesByTeacherRegCode(teacherRegCode string) ([]models.Course, error) {
	rows, err := db.DB.Query(`
        SELECT c.id, c.name
        FROM teacher_course_groups tcg
        JOIN courses c ON c.id = tcg.course_id
        WHERE tcg.teacher_reg_code = ?
        GROUP BY c.id, c.name
    `, teacherRegCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var courses []models.Course
	for rows.Next() {
		var course models.Course
		if err := rows.Scan(&course.ID, &course.Name); err != nil {
			return nil, err
		}
		courses = append(courses, course)
	}
	return courses, nil
}

// AddSchedule –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É schedules.
func AddSchedule(schedule models.Schedule) error {
	// –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∫ —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RFC3339 (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ñ–æ—Ä–º–∞—Ç)
	scheduleTimeStr := schedule.ScheduleTime.Format(time.RFC3339)

	query := `
	    INSERT INTO schedules (course_id, group_name, teacher_reg_code, schedule_time, description)
	    VALUES (?, ?, ?, ?, ?)
	`
	_, err := db.DB.Exec(query, schedule.CourseID, schedule.GroupName, schedule.TeacherRegCode, scheduleTimeStr, schedule.Description)
	return err
}

// AddMaterial –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É materials.
func AddMaterial(material models.Material) error {
	query := `
	    INSERT INTO materials (course_id, group_name, teacher_reg_code, title, file_url, description)
	    VALUES (?, ?, ?, ?, ?, ?)
	`
	_, err := db.DB.Exec(query, material.CourseID, material.GroupName, material.TeacherRegCode, material.Title, material.FileURL, material.Description)
	return err
}

// AddScheduleForTeacher –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, –µ—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
// –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –¥–∞–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º –∏ –≥—Ä—É–ø–ø–æ–π. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É schedules.
func AddScheduleForTeacher(teacherRegCode string, courseID int64, groupName string, scheduleTime time.Time, description string) error {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã.
	queryCheck := `
	    SELECT COUNT(*) FROM teacher_course_groups
	    WHERE teacher_reg_code = ? AND course_id = ? AND group_name = ?
	`
	var count int
	err := db.DB.QueryRow(queryCheck, teacherRegCode, courseID, groupName).Scan(&count)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: %v", err)
	}
	if count == 0 {
		return fmt.Errorf("–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º %s –Ω–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –∫—É—Ä—Å–æ–º %d –¥–ª—è –≥—Ä—É–ø–ø—ã %s", teacherRegCode, courseID, groupName)
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É schedules.
	scheduleTimeStr := scheduleTime.Format(time.RFC3339) // –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
	queryInsert := `
	    INSERT INTO schedules (course_id, group_name, teacher_reg_code, schedule_time, description)
	    VALUES (?, ?, ?, ?, ?)
	`
	_, err = db.DB.Exec(queryInsert, courseID, groupName, teacherRegCode, scheduleTimeStr, description)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %v", err)
	}
	return nil
}

// GetTeacherSchedulesFormatted —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –∫–æ–¥—É.
func GetTeacherSchedulesFormatted(teacherRegCode string) (string, error) {
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã schedules –∏ courses –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
	rows, err := db.DB.Query(`
		SELECT s.schedule_time, s.description, s.group_name, c.name
		FROM schedules s
		JOIN courses c ON s.course_id = c.id
		WHERE s.teacher_reg_code = ?
		ORDER BY s.schedule_time
	`, teacherRegCode)
	if err != nil {
		return "", err
	}
	defer rows.Close()

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –∫—É—Ä—Å—É
	scheduleMap := make(map[string][]string)
	for rows.Next() {
		var scheduleTimeStr, description, groupName, courseName string
		if err := rows.Scan(&scheduleTimeStr, &description, &groupName, &courseName); err != nil {
			return "", err
		}
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ time.Time
		t, err := time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return "", err
		}
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
		entry := fmt.Sprintf("‚Ä¢ %s ‚Äì %s (–≥—Ä—É–ø–ø–∞: %s)", t.Format("02.01.2006 15:04"), description, groupName)
		scheduleMap[courseName] = append(scheduleMap[courseName], entry)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if len(scheduleMap) == 0 {
		return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", nil
	}

	msgText := "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
	for course, entries := range scheduleMap {
		msgText += fmt.Sprintf("üìò %s:\n", course)
		for _, entry := range entries {
			msgText += "  " + entry + "\n"
		}
		msgText += "\n"
	}

	return msgText, nil
}

// GetStudentSchedulesFormatted —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ –≥—Ä—É–ø–ø–µ.
func GetStudentSchedulesFormatted(group string) (string, error) {
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã schedules –∏ courses –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
	rows, err := db.DB.Query(`
		SELECT s.schedule_time, s.description, s.teacher_reg_code, c.name
		FROM schedules s
		JOIN courses c ON s.course_id = c.id
		WHERE s.group_name = ?
		ORDER BY s.schedule_time
	`, group)
	if err != nil {
		return "", err
	}
	defer rows.Close()

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –∫—É—Ä—Å—É
	scheduleMap := make(map[string][]string)
	for rows.Next() {
		var scheduleTimeStr, description, teacherRegCode, courseName string
		if err := rows.Scan(&scheduleTimeStr, &description, &teacherRegCode, &courseName); err != nil {
			return "", err
		}
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ time.Time
		t, err := time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return "", err
		}
		// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å: –≤—Ä–µ–º—è ‚Äì –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äì –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
		entry := fmt.Sprintf("‚Ä¢ %s ‚Äì %s (–ü—Ä–µ–ø.: %s)", t.Format("02.01.2006 15:04"), description, teacherRegCode)
		scheduleMap[courseName] = append(scheduleMap[courseName], entry)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if len(scheduleMap) == 0 {
		return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", nil
	}

	msgText := "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
	for course, entries := range scheduleMap {
		msgText += fmt.Sprintf("üìò %s:\n", course)
		for _, entry := range entries {
			msgText += "  " + entry + "\n"
		}
		msgText += "\n"
	}

	return msgText, nil
}
