package handlers

import (
	"education/internal/db"
	"education/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// sendRoleSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.
func sendRoleSelection(chatID int64, bot *tgbotapi.BotAPI) {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°—Ç—É–¥–µ–Ω—Ç", "role_student"),
		tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "role_teacher"),
	))

	// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "cancel_process"),
	))

	msg := tgbotapi.NewMessage(chatID, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	sendAndTrackMessage(bot, msg)
}

// sendFacultySelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
func sendFacultySelection(chatID int64, bot *tgbotapi.BotAPI) {
	facs := GetFaculties()
	if len(facs) == 0 {
		var err error
		facs, err = GetAllFaculties()
		if err != nil || len(facs) == 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
			sendAndTrackMessage(bot, msg)
			return
		}
		SetFaculties(facs)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, f := range facs {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(f, f),
		)
		rows = append(rows, row)
	}

	// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "cancel_process"),
	))

	msg := tgbotapi.NewMessage(chatID, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	sendAndTrackMessage(bot, msg)
}

// sendGroupSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
func sendGroupSelection(chatID int64, facultyName string, bot *tgbotapi.BotAPI) {
	groups := GetGroups(facultyName)
	if len(groups) == 0 {
		var err error
		groups, err = GetGroupsByFaculty(facultyName)
		if err != nil || len(groups) == 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ "+facultyName+".")
			sendAndTrackMessage(bot, msg)
			return
		}
		SetGroups(facultyName, groups)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, g := range groups {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(g, g),
		)
		rows = append(rows, row)
	}

	// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "cancel_process"),
	))

	msg := tgbotapi.NewMessage(chatID, "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	sendAndTrackMessage(bot, msg)
}

// GetCoursesByTeacherID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—ë—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º teacherID.
// –ï—Å–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–∞–∑–Ω—ã–º –≥—Ä—É–ø–ø–∞–º, –∫—É—Ä—Å –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
func GetCoursesByTeacherID(teacherID int64) ([]models.Course, error) {
	rows, err := db.DB.Query(`
		SELECT c.id, c.name, c.description
		FROM teacher_course_groups tcg
		JOIN courses c ON c.id = tcg.course_id
		WHERE tcg.teacher_id = ?
		GROUP BY c.id, c.name, c.description
	`, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var courses []models.Course
	for rows.Next() {
		var course models.Course
		if err := rows.Scan(&course.ID, &course.Name, &course.Description); err != nil {
			return nil, err
		}
		courses = append(courses, course)
	}
	return courses, nil
}

// GetTeacherGroups –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–≤—è–∑–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ teacher_course_groups.
func GetTeacherGroups(teacherID int64) ([]models.TeacherCourseGroup, error) {
	rows, err := db.DB.Query(`
		SELECT id, teacher_id, group_name
		FROM teacher_course_groups
		WHERE teacher_id = ?
	`, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var groups []models.TeacherCourseGroup
	for rows.Next() {
		var tg models.TeacherCourseGroup
		if err := rows.Scan(&tg.ID, &tg.TeacherID, &tg.GroupName); err != nil {
			return nil, err
		}
		groups = append(groups, tg)
	}
	return groups, nil
}
