package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"sort"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ShowEnhancedScheduleDay shows an enhanced version of the daily schedule
func ShowEnhancedScheduleDay(chatID int64, bot *tgbotapi.BotAPI, user *models.User, day time.Time) error {
	dayStart := day.Truncate(24 * time.Hour)
	dayEnd := dayStart.Add(24*time.Hour - time.Second)

	fmt.Printf("ShowEnhancedScheduleDay for user %+v, day: %s\n", user, day.Format("2006-01-02"))

	var schedules []models.Schedule
	var err error
	if user.Role == "teacher" {
		schedules, err = GetSchedulesForTeacherByDateRange(user.RegistrationCode, dayStart, dayEnd)
	} else {
		schedules, err = GetSchedulesForGroupByDateRange(user.Group, dayStart, dayEnd)
	}
	if err != nil {
		// Return a clear error message for daily schedule display
		errMsg := "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + err.Error()
		msg := tgbotapi.NewMessage(chatID, errMsg)
		return sendAndTrackMessage(bot, msg)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
	filter := GetUserFilter(chatID)
	filteredSchedules := ApplyFilters(schedules, filter)

	text := FormatEnhancedDaySchedule(filteredSchedules, day, user.Role)

	// Add navigation buttons for previous/next day
	prevDay := day.AddDate(0, 0, -1)
	nextDay := day.AddDate(0, 0, 1)

	// –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	navRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ü—Ä–µ–¥. –¥–µ–Ω—å", fmt.Sprintf("day_%s", prevDay.Format("2006-01-02"))),
		tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è", "mode_day"),
		tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥. –¥–µ–Ω—å ‚ñ∂Ô∏è", fmt.Sprintf("day_%s", nextDay.Format("2006-01-02"))),
	)

	// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
	modeKeyboard := BuildModeSwitchKeyboard("mode_day")

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
	filterRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "filter_menu"),
	)

	// –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if filter.CourseName != "" || filter.LessonType != "" {
		text += "\n\n<b>üìå –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
		if filter.CourseName != "" {
			text += fmt.Sprintf("‚Ä¢ –ö—É—Ä—Å: <b>%s</b>\n", filter.CourseName)
		}
		if filter.LessonType != "" {
			text += fmt.Sprintf("‚Ä¢ –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>%s</b>\n", filter.LessonType)
		}
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫
	var allRows [][]tgbotapi.InlineKeyboardButton
	allRows = append(allRows, navRow)
	allRows = append(allRows, modeKeyboard.InlineKeyboard...)
	allRows = append(allRows, filterRow)

	enhancedKeyboard := tgbotapi.NewInlineKeyboardMarkup(allRows...)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = enhancedKeyboard
	return sendAndTrackMessage(bot, msg)
}

// FormatEnhancedDaySchedule creates a beautifully formatted day schedule
func FormatEnhancedDaySchedule(schedules []models.Schedule, day time.Time, role string) string {
	if len(schedules) == 0 {
		return fmt.Sprintf("üìÜ <b>%s</b>\n\nüîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</i>",
			day.Format("02.01.2006")+" ("+weekdayName(day.Weekday())+")")
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
	sort.Slice(schedules, func(i, j int) bool {
		return schedules[i].ScheduleTime.Before(schedules[j].ScheduleTime)
	})

	var sb strings.Builder
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π –∏ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
	sb.WriteString(fmt.Sprintf("üìÜ <b>%s</b>\n\n",
		day.Format("02.01.2006")+" ("+weekdayName(day.Weekday())+")"))

	// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
	sb.WriteString("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n")

	// –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π
	lessonCount := 0

	for _, s := range schedules {
		lessonCount++
		timeStr := s.ScheduleTime.Format("15:04")
		endTimeStr := s.ScheduleTime.Add(time.Duration(s.Duration) * time.Minute).Format("15:04")

		// –ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
		sb.WriteString(fmt.Sprintf("üìå <b>–ó–∞–Ω—è—Ç–∏–µ %d</b>\n", lessonCount))
		sb.WriteString(fmt.Sprintf("‚è∞ <b>%s - %s</b> (%d –º–∏–Ω.)\n", timeStr, endTimeStr, s.Duration))
		sb.WriteString(fmt.Sprintf("üìö <b>%s</b>\n", s.Description))

		if role == "teacher" {
			sb.WriteString(fmt.Sprintf("üë• –ì—Ä—É–ø–ø–∞: %s\n", s.GroupName))
		} else {
			sb.WriteString(fmt.Sprintf("üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n", s.TeacherRegCode))
		}

		sb.WriteString(fmt.Sprintf("üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: %s\n", s.Auditory))
		sb.WriteString(fmt.Sprintf("üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: %s\n", s.LessonType))

		// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–Ω—è—Ç–∏—è–º–∏
		sb.WriteString("\n")
	}

	// –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	sb.WriteString(fmt.Sprintf("üî¢ <b>–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: %d</b>\n", lessonCount))

	// –ù–∞—Ö–æ–¥–∏–º –æ–±—â—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π
	var totalDuration int
	for _, s := range schedules {
		totalDuration += s.Duration
	}
	sb.WriteString(fmt.Sprintf("‚åõ <b>–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –º–∏–Ω (%d —á %d –º–∏–Ω)</b>\n\n",
		totalDuration, totalDuration/60, totalDuration%60))

	sb.WriteString("‚ú® <i>–ü—É—Å—Ç—å –¥–µ–Ω—å –ø—Ä–æ–π–¥–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ!</i>")

	return sb.String()
}

// ShowScheduleWeek –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é.
// weekStart ‚Äì –¥–∞—Ç–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å.
func ShowScheduleWeek(chatID int64, bot *tgbotapi.BotAPI, user *models.User, weekStart time.Time) error {
	weekEnd := weekStart.AddDate(0, 0, 6)

	fmt.Printf("ShowScheduleWeek for user %+v, weekStart: %s\n", user, weekStart.Format("2006-01-02"))

	var schedules []models.Schedule
	var err error
	if user.Role == "teacher" {
		schedules, err = GetSchedulesForTeacherByDateRange(user.RegistrationCode, weekStart, weekEnd)
	} else {
		schedules, err = GetSchedulesForGroupByDateRange(user.Group, weekStart, weekEnd)
	}
	if err != nil {
		// Return a clear error message for weekly schedule display
		errMsg := "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + err.Error()
		msg := tgbotapi.NewMessage(chatID, errMsg)
		return sendAndTrackMessage(bot, msg)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
	filter := GetUserFilter(chatID)
	filteredSchedules := ApplyFilters(schedules, filter)

	text := FormatSchedulesByWeek(filteredSchedules, weekStart, weekEnd, user.Role, user)

	// –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if filter.CourseName != "" || filter.LessonType != "" {
		filterInfo := "\n<b>üìå –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
		if filter.CourseName != "" {
			filterInfo += fmt.Sprintf("‚Ä¢ –ö—É—Ä—Å: <b>%s</b>\n", filter.CourseName)
		}
		if filter.LessonType != "" {
			filterInfo += fmt.Sprintf("‚Ä¢ –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>%s</b>\n", filter.LessonType)
		}
		text = text + filterInfo
	}

	// –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	baseRows := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("‚óÑ", fmt.Sprintf("week_prev_%s", weekStart.AddDate(0, 0, -7).Format("2006-01-02"))),
			tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è", "week_today"),
			tgbotapi.NewInlineKeyboardButtonData("‚ñ∫", fmt.Sprintf("week_next_%s", weekStart.AddDate(0, 0, 7).Format("2006-01-02"))),
		},
		{}, // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
	filterRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "filter_menu"),
	)
	baseRows = append(baseRows, filterRow)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(baseRows...)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ä–µ–∂–∏–º–æ–≤
	modeKeyboard := BuildModeSwitchKeyboard("mode_week")
	if modeKeyboard.InlineKeyboard != nil {
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, modeKeyboard.InlineKeyboard...)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	return sendAndTrackMessage(bot, msg)
}

// –£–î–ê–õ–Ø–ï–ú –¥—É–±–ª–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é ShowEnhancedScheduleDay, –æ–Ω–∞ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ schedule_day.go

func GetSchedulesForTeacherByDateRange(teacherRegCode string, start, end time.Time) ([]models.Schedule, error) {
	query := `
        SELECT
            s.id, s.course_id, s.group_name, s.teacher_reg_code,
            s.schedule_time, s.description, s.auditory, s.lesson_type, s.duration,
            COALESCE(u.name, s.teacher_reg_code) AS teacher_name,
            COALESCE(c.name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å') AS course_name
        FROM schedules s
        LEFT JOIN users u ON s.teacher_reg_code = u.registration_code
        LEFT JOIN courses c ON s.course_id = c.id
        WHERE s.teacher_reg_code = ? AND date(s.schedule_time) BETWEEN ? AND ?
        ORDER BY s.schedule_time
    `

	// Debug log
	fmt.Printf("GetSchedulesForTeacherByDateRange: %s, %s, %s\n",
		teacherRegCode, start.Format("2006-01-02"), end.Format("2006-01-02"))

	rows, err := db.DB.Query(query, teacherRegCode, start.Format("2006-01-02"), end.Format("2006-01-02"))
	if err != nil {
		fmt.Printf("Database query error: %v\n", err)
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		var teacherName, courseName string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration,
			&teacherName,
			&courseName,
		); err != nil {
			fmt.Printf("Row scan error: %v\n", err)
			return nil, err
		}

		// Try to parse the time with error handling
		if parsedTime, err := time.Parse(time.RFC3339, scheduleTimeStr); err != nil {
			fmt.Printf("Time parse error: %v for string %s\n", err, scheduleTimeStr)

			// Try alternative formats as fallback
			layouts := []string{"2006-01-02T15:04:05Z", "2006-01-02 15:04:05", "2006-01-02T15:04:05"}
			parsed := false

			for _, layout := range layouts {
				if parsedTime, err := time.Parse(layout, scheduleTimeStr); err == nil {
					s.ScheduleTime = parsedTime
					parsed = true
					break
				}
			}

			if !parsed {
				// Use current time as last resort to avoid crashing
				s.ScheduleTime = time.Now()
			}
		} else {
			s.ScheduleTime = parsedTime
		}

		// Store teacher name and course name in context
		s.TeacherRegCode = teacherName // Use teacher name instead of reg code

		// Only prepend course name if it's a valid course
		if courseName != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å" {
			s.Description = courseName + ": " + s.Description
		}

		schedules = append(schedules, s)
	}

	fmt.Printf("Found %d schedules for teacher %s\n", len(schedules), teacherRegCode)
	return schedules, rows.Err()
}

func GetSchedulesForGroupByDateRange(group string, start, end time.Time) ([]models.Schedule, error) {
	query := `
       SELECT
         s.id, s.course_id, s.group_name, s.teacher_reg_code,
         s.schedule_time, s.description, s.auditory, s.lesson_type, s.duration,
         COALESCE(u.name, s.teacher_reg_code) AS teacher_name,
         COALESCE(c.name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å') AS course_name
       FROM schedules s
       LEFT JOIN users u ON s.teacher_reg_code = u.registration_code
       LEFT JOIN courses c ON s.course_id = c.id
       WHERE s.group_name = ? AND date(s.schedule_time) BETWEEN ? AND ?
       ORDER BY s.schedule_time
    `

	// Debug log
	fmt.Printf("GetSchedulesForGroupByDateRange: %s, %s, %s\n",
		group, start.Format("2006-01-02"), end.Format("2006-01-02"))

	rows, err := db.DB.Query(query, group, start.Format("2006-01-02"), end.Format("2006-01-02"))
	if err != nil {
		fmt.Printf("Database query error: %v\n", err)
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		var teacherName, courseName string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration,
			&teacherName,
			&courseName,
		); err != nil {
			fmt.Printf("Row scan error: %v\n", err)
			return nil, err
		}

		// Try to parse the time with error handling
		if parsedTime, err := time.Parse(time.RFC3339, scheduleTimeStr); err != nil {
			fmt.Printf("Time parse error: %v for string %s\n", err, scheduleTimeStr)

			// Try alternative formats as fallback
			layouts := []string{"2006-01-02T15:04:05Z", "2006-01-02 15:04:05", "2006-01-02T15:04:05"}
			parsed := false

			for _, layout := range layouts {
				if parsedTime, err := time.Parse(layout, scheduleTimeStr); err == nil {
					s.ScheduleTime = parsedTime
					parsed = true
					break
				}
			}

			if !parsed {
				// Use current time as last resort to avoid crashing
				s.ScheduleTime = time.Now()
			}
		} else {
			s.ScheduleTime = parsedTime
		}

		// Store teacher name and course name in context
		s.TeacherRegCode = teacherName // Use teacher name instead of reg code

		// Only prepend course name if it's a valid course
		if courseName != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å" {
			s.Description = courseName + ": " + s.Description
		}

		schedules = append(schedules, s)
	}

	fmt.Printf("Found %d schedules for group %s\n", len(schedules), group)
	return schedules, rows.Err()
}

// GetSchedulesByTeacher –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Schedule.
func GetSchedulesByTeacher(teacherRegCode string) ([]models.Schedule, error) {
	rows, err := db.DB.Query(`
		SELECT
			s.id,
			s.course_id,
			s.group_name,
			s.teacher_reg_code,
			s.schedule_time,
			s.description,
			s.auditory,
			s.lesson_type,
			s.duration,
			COALESCE(u.name, s.teacher_reg_code) AS teacher_name,
			COALESCE(c.name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å') AS course_name
		FROM schedules s
		LEFT JOIN users u ON s.teacher_reg_code = u.registration_code
		LEFT JOIN courses c ON s.course_id = c.id
		WHERE s.teacher_reg_code = ?
		ORDER BY s.schedule_time
	`, teacherRegCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		var teacherName, courseName string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration,
			&teacherName,
			&courseName,
		); err != nil {
			return nil, err
		}

		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}

		// Store teacher name and course name in context
		s.TeacherRegCode = teacherName

		// Only prepend course name if it's a valid course
		if courseName != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å" {
			s.Description = courseName + ": " + s.Description
		}

		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

// GetSchedulesByGroup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Schedule.
func GetSchedulesByGroup(group string) ([]models.Schedule, error) {
	rows, err := db.DB.Query(`
		SELECT
			s.id,
			s.course_id,
			s.group_name,
			s.teacher_reg_code,
			s.schedule_time,
			s.description,
			s.auditory,
			s.lesson_type,
			s.duration,
			COALESCE(u.name, s.teacher_reg_code) AS teacher_name,
			COALESCE(c.name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å') AS course_name
		FROM schedules s
		LEFT JOIN users u ON s.teacher_reg_code = u.registration_code
		LEFT JOIN courses c ON s.course_id = c.id
		WHERE s.group_name = ?
		ORDER BY s.schedule_time
	`, group)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		var teacherName, courseName string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration,
			&teacherName,
			&courseName,
		); err != nil {
			return nil, err
		}

		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}

		// Store teacher name and course name in context
		s.TeacherRegCode = teacherName

		// Only prepend course name if it's a valid course
		if courseName != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å" {
			s.Description = courseName + ": " + s.Description
		}

		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

func FormatSchedulesByWeek(
	schedules []models.Schedule,
	weekStart, weekEnd time.Time,
	mode string,
	user *models.User,
) string {
	if len(schedules) == 0 {
		return fmt.Sprintf("üìÜ <b>–ù–µ–¥–µ–ª—è %s ‚Äì %s</b>\n\nüîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é</i>",
			weekStart.Format("02.01.2006"), weekEnd.Format("02.01.2006"))
	}

	// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
	grouped := make(map[string][]models.Schedule)
	for _, s := range schedules {
		date := s.ScheduleTime.Format("2006-01-02")
		grouped[date] = append(grouped[date], s)
	}

	var msg strings.Builder
	msg.WriteString(fmt.Sprintf("üìÜ <b>–ù–µ–¥–µ–ª—è %s ‚Äì %s</b>\n\n",
		weekStart.Format("02.01.2006"), weekEnd.Format("02.01.2006")))

	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
	hasEvents := false
	for d := 0; d < 7; d++ {
		day := weekStart.AddDate(0, 0, d)
		dayStr := day.Format("2006-01-02")

		if entries, ok := grouped[dayStr]; ok {
			hasEvents = true

			// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
			msg.WriteString(fmt.Sprintf("üóì <b>%s (%s)</b>\n",
				day.Format("02.01.2006"), weekdayName(day.Weekday())))
			msg.WriteString("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
			sort.Slice(entries, func(i, j int) bool {
				return entries[i].ScheduleTime.Before(entries[j].ScheduleTime)
			})

			for _, s := range entries {
				timeStr := s.ScheduleTime.Format("15:04")
				endTimeStr := s.ScheduleTime.Add(time.Duration(s.Duration) * time.Minute).Format("15:04")

				// –ü–æ–ª–Ω—ã–π –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏
				msg.WriteString(fmt.Sprintf("\n‚è∞ <b>%s - %s</b> (%d –º–∏–Ω.)\n", timeStr, endTimeStr, s.Duration))
				msg.WriteString(fmt.Sprintf("üìö <b>%s</b>\n", s.Description))

				if mode == "teacher" {
					msg.WriteString(fmt.Sprintf("üë• –ì—Ä—É–ø–ø–∞: %s\n", s.GroupName))
				} else {
					msg.WriteString(fmt.Sprintf("üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n", s.TeacherRegCode))
				}

				msg.WriteString(fmt.Sprintf("üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: %s\n", s.Auditory))
				msg.WriteString(fmt.Sprintf("üìù –¢–∏–ø: %s\n", s.LessonType))
			}
			msg.WriteString("\n")
		}
	}

	if !hasEvents {
		msg.WriteString("üîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é</i>\n")
	} else {
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
		msg.WriteString("\n<i>‚ú® –£–¥–∞—á–Ω–æ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏!</i>")
	}

	return msg.String()
}

// BuildWeekNavigationKeyboardFiltered —Å—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–µ–¥–µ–ª–∏, –æ—Ç–æ–±—Ä–∞–∂–∞—è –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π, –≥–¥–µ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è.
// –ï—Å–ª–∏ –≤ –¥–µ–Ω—å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –∫–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "‚ùå" –∏ callback_data="ignore".
func BuildWeekNavigationKeyboardFiltered(weekStart time.Time, schedules []models.Schedule) tgbotapi.InlineKeyboardMarkup {
	eventDays := make(map[string]bool)
	for _, s := range schedules {
		eventDays[s.ScheduleTime.Format("02.01")] = true
	}

	prevWeek := weekStart.AddDate(0, 0, -7)
	nextWeek := weekStart.AddDate(0, 0, 7)

	var dayRow []tgbotapi.InlineKeyboardButton
	for i := 0; i < 7; i++ {
		day := weekStart.AddDate(0, 0, i)
		dayStr := day.Format("02.01")
		label := dayStr
		if !eventDays[dayStr] {
			label = "‚Äî" + dayStr
		}
		dayRow = append(dayRow, tgbotapi.NewInlineKeyboardButtonData(
			label,
			fmt.Sprintf("day_%s", day.Format("2006-01-02")),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÑ", fmt.Sprintf("week_prev_%s", prevWeek.Format("2006-01-02"))),
			tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è", "week_today"),
			tgbotapi.NewInlineKeyboardButtonData("‚ñ∫", fmt.Sprintf("week_next_%s", nextWeek.Format("2006-01-02"))),
		),
		dayRow,
	)
}

func BuildWeekNavigationKeyboardFilteredWithFilter(weekStart time.Time, schedules []models.Schedule) tgbotapi.InlineKeyboardMarkup {
	// –°—Ç—Ä–æ–∏–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–∫–∞–∫ –≤ BuildWeekNavigationKeyboardFiltered)
	weekKeyboard := BuildWeekNavigationKeyboardFiltered(weekStart, schedules)
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–ø—Ä–∏–º–µ—Ä)
	filterRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–§–∏–ª—å—Ç—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "filter_course_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
		tgbotapi.NewInlineKeyboardButtonData("–§–∏–ª—å—Ç—Ä: –§–∏–∑–∏–∫–∞", "filter_course_–§–∏–∑–∏–∫–∞"),
	)
	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä—è–¥—ã (–Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–π —Ä—è–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
	allRows := weekKeyboard.InlineKeyboard
	allRows = append(allRows, filterRow)
	return tgbotapi.NewInlineKeyboardMarkup(allRows...)
}

func ShowScheduleModeMenu(chatID int64, bot *tgbotapi.BotAPI) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–µ–Ω—å", "mode_day"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–µ–¥–µ–ª—è", "mode_week"),
			// –£–¥–∞–ª—è–µ–º –æ–ø—Ü–∏—é "–ú–µ—Å—è—Ü"
		),
		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –§–∏–ª—å—Ç—Ä—ã", "filter_course_menu"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	return sendAndTrackMessage(bot, msg)
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è BuildCalendarTimeline
func BuildCalendarTimeline(schedules []models.Schedule, day time.Time) string {
	if len(schedules) == 0 {
		return fmt.Sprintf("üìÜ <b>%s</b>\n\nüîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</i>",
			day.Format("02.01.2006")+" ("+weekdayName(day.Weekday())+")")
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
	sort.Slice(schedules, func(i, j int) bool {
		return schedules[i].ScheduleTime.Before(schedules[j].ScheduleTime)
	})

	var sb strings.Builder
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π –∏ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
	sb.WriteString(fmt.Sprintf("üìÜ <b>%s</b>\n\n",
		day.Format("02.01.2006")+" ("+weekdayName(day.Weekday())+")"))

	// –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
	dayStart := day.Truncate(24 * time.Hour)
	dayEnd := dayStart.Add(24 * time.Hour)

	// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
	sb.WriteString("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n")

	seen := make(map[string]bool)
	hasEvents := false

	for _, s := range schedules {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –¥–Ω—é
		if s.ScheduleTime.Before(dayStart) || s.ScheduleTime.After(dayEnd) {
			continue
		}

		hasEvents = true

		// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
		key := fmt.Sprintf("%s-%d-%s-%s-%s-%s",
			s.ScheduleTime.Format("15:04"),
			s.CourseID,
			s.Description,
			s.GroupName,
			s.Auditory,
			s.LessonType,
		)
		if seen[key] {
			continue
		}
		seen[key] = true

		timeStr := s.ScheduleTime.Format("15:04")
		endTimeStr := s.ScheduleTime.Add(time.Duration(s.Duration) * time.Minute).Format("15:04")

		// –ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏
		sb.WriteString(fmt.Sprintf("‚è∞ <b>%s - %s</b> (%d –º–∏–Ω.)\n", timeStr, endTimeStr, s.Duration))
		sb.WriteString(fmt.Sprintf("üìö <b>%s</b>\n", s.Description))
		sb.WriteString(fmt.Sprintf("üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n", s.TeacherRegCode))
		sb.WriteString(fmt.Sprintf("üë• –ì—Ä—É–ø–ø–∞: %s\n", s.GroupName))
		sb.WriteString(fmt.Sprintf("üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: %s\n", s.Auditory))
		sb.WriteString(fmt.Sprintf("üìù –¢–∏–ø: %s\n", s.LessonType))
		sb.WriteString("\n")
	}

	if !hasEvents {
		sb.WriteString("üîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</i>\n")
	}

	return sb.String()
}

// weekdayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
func weekdayName(wd time.Weekday) string {
	switch wd {
	case time.Monday:
		return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
	case time.Tuesday:
		return "–í—Ç–æ—Ä–Ω–∏–∫"
	case time.Wednesday:
		return "–°—Ä–µ–¥–∞"
	case time.Thursday:
		return "–ß–µ—Ç–≤–µ—Ä–≥"
	case time.Friday:
		return "–ü—è—Ç–Ω–∏—Ü–∞"
	case time.Saturday:
		return "–°—É–±–±–æ—Ç–∞"
	case time.Sunday:
		return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
	default:
		return ""
	}
}
