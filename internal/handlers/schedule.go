package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// GetSchedulesByTeacher –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ –∫—É—Ä—Å–∞–º –∏ –≥—Ä—É–ø–ø–∞–º.
func GetSchedulesByTeacher(teacherRegCode string) ([]models.Schedule, error) {
	rows, err := db.DB.Query(`
		SELECT id, course_id, group_name, teacher_reg_code, schedule_time, description
		FROM schedules
		WHERE teacher_reg_code = ?
		ORDER BY schedule_time
	`, teacherRegCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(&s.ID, &s.CourseID, &s.GroupName, &s.TeacherRegCode, &scheduleTimeStr, &s.Description); err != nil {
			return nil, err
		}
		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

// GetSchedulesByGroup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã (—É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ, –Ω–æ –≤–∫–ª—é—á–∏–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã).
func GetSchedulesByGroup(group string) ([]models.Schedule, error) {
	rows, err := db.DB.Query(`
		SELECT id, course_id, group_name, teacher_reg_code, schedule_time, description
		FROM schedules
		WHERE group_name = ?
		ORDER BY schedule_time
	`, group)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(&s.ID, &s.CourseID, &s.GroupName, &s.TeacherRegCode, &scheduleTimeStr, &s.Description); err != nil {
			return nil, err
		}
		s.ScheduleTime, _ = time.Parse(time.RFC3339, scheduleTimeStr)
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

// FormatSchedulesByWeek —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
func FormatSchedulesByWeek(schedules []models.Schedule, mode string, user *models.User) (string, error) {
	if len(schedules) == 0 {
		return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", nil
	}

	// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
	scheduleByDay := make(map[time.Weekday][]string)

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
	courseMap := make(map[int64]string)   // courseID -> courseName
	teacherMap := make(map[string]string) // teacherRegCode -> teacherName

	// –ó–∞–ø–æ–ª–Ω—è–µ–º courseMap
	courses, err := db.DB.Query(`SELECT id, name FROM courses`)
	if err != nil {
		return "", err
	}
	defer courses.Close()
	for courses.Next() {
		var id int64
		var name string
		if err := courses.Scan(&id, &name); err != nil {
			return "", err
		}
		courseMap[id] = name
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º teacherMap
	teachers, err := db.DB.Query(`SELECT registration_code, name FROM users WHERE role = 'teacher'`)
	if err != nil {
		return "", err
	}
	defer teachers.Close()
	for teachers.Next() {
		var regCode, name string
		if err := teachers.Scan(&regCode, &name); err != nil {
			return "", err
		}
		teacherMap[regCode] = name
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
	for _, s := range schedules {
		wd := s.ScheduleTime.Weekday()
		courseName := courseMap[s.CourseID]
		teacherName := teacherMap[s.TeacherRegCode]
		var entry string
		if mode == "teacher" {
			// –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É
			entry = fmt.Sprintf("‚Ä¢ %s [%s]: %s (–≥—Ä—É–ø–ø–∞: %s)", s.ScheduleTime.Format("15:04"), courseName, s.Description, s.GroupName)
		} else {
			// –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
			entry = fmt.Sprintf("‚Ä¢ %s [%s]: %s (–ü—Ä–µ–ø.: %s)", s.ScheduleTime.Format("15:04"), courseName, s.Description, teacherName)
		}
		scheduleByDay[wd] = append(scheduleByDay[wd], entry)
	}

	// –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
	weekdaysOrder := []time.Weekday{
		time.Monday, time.Tuesday, time.Wednesday,
		time.Thursday, time.Friday, time.Saturday, time.Sunday,
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	msgText := "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
	for _, wd := range weekdaysOrder {
		entries, ok := scheduleByDay[wd]
		if !ok || len(entries) == 0 {
			continue
		}
		msgText += fmt.Sprintf("üîπ %s:\n", weekdayName(wd))
		for _, entry := range entries {
			msgText += "  " + entry + "\n"
		}
		msgText += "\n"
	}

	return msgText, nil
}

// ShowSchedule –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–µ—à–∞.
func ShowSchedule(chatID int64, bot *tgbotapi.BotAPI, user *models.User) error {
	limit := 5
	var schedules []models.Schedule
	var totalRecords int
	var err error

	if user.Role == "teacher" {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
		schedules, totalRecords, err = GetScheduleByTeacherCachedPaginated(user.RegistrationCode, limit, 0)
		if err != nil {
			return err
		}
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–ø–æ –≥—Ä—É–ø–ø–µ)
		schedules, totalRecords, err = GetScheduleByGroupCachedPaginated(user.Group, limit, 0)
		if err != nil {
			return err
		}
	}

	totalPages := (totalRecords + limit - 1) / limit
	text := FormatPaginatedSchedules(schedules, 1, totalPages, user.Role, user)
	keyboard := BuildPaginationKeyboardWithNumbers(1, totalPages, "schedule")

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard

	return sendAndTrackMessage(bot, msg)
}

// weekdayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
func weekdayName(wd time.Weekday) string {
	switch wd {
	case time.Monday:
		return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
	case time.Tuesday:
		return "–í—Ç–æ—Ä–Ω–∏–∫"
	case time.Wednesday:
		return "–°—Ä–µ–¥–∞"
	case time.Thursday:
		return "–ß–µ—Ç–≤–µ—Ä–≥"
	case time.Friday:
		return "–ü—è—Ç–Ω–∏—Ü–∞"
	case time.Saturday:
		return "–°—É–±–±–æ—Ç–∞"
	case time.Sunday:
		return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
	default:
		return ""
	}
}
