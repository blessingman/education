package handlers

import (
	"fmt"

	"education/internal/auth"
	"education/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// processRegistrationMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
func processRegistrationMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI, state, text string) {
	chatID := update.Message.Chat.ID
	tempData, ok := userTempDataMap[chatID]
	if !ok {
		tempData = &tempUserData{}
		userTempDataMap[chatID] = tempData
	}

	switch state {
	case StateWaitingForPass:
		if tempData.Faculty == "" || tempData.Group == "" {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."))
			return
		}
		vp, found := FindVerifiedParticipant(tempData.Faculty, tempData.Group, text)
		if !found {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"))
			return
		}
		tempData.Verified = vp
		userStates[chatID] = StateWaitingForPassword
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:"))
		return

	case StateWaitingForPassword:
		if tempData.Verified == nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
			return
		}
		vp := tempData.Verified
		newUser := &models.User{
			TelegramID:       chatID,
			Role:             vp.Role,
			Name:             vp.FIO,
			Group:            vp.Group,
			Password:         text,
			RegistrationCode: vp.Pass,
		}
		auth.SaveUser(newUser)
		finalMsg := fmt.Sprintf("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüë§ –§–ò–û: %s\nüè´ –§–∞–∫—É–ª—å—Ç–µ—Ç: %s\nüìö –ì—Ä—É–ø–ø–∞: %s\nüîë –†–æ–ª—å: %s", newUser.Name, vp.Faculty, newUser.Group, vp.Role)
		bot.Send(tgbotapi.NewMessage(chatID, finalMsg))
		delete(userStates, chatID)
		delete(userTempDataMap, chatID)
		return
	}
}

// sendFacultySelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.
func sendFacultySelection(chatID int64, bot *tgbotapi.BotAPI) {
	var rows [][]tgbotapi.InlineKeyboardButton
	for faculty := range faculties {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(faculty, faculty),
		))
	}
	msg := tgbotapi.NewMessage(chatID, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

// sendGroupSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.
func sendGroupSelection(chatID int64, faculty string, bot *tgbotapi.BotAPI) {
	groups, exists := faculties[faculty]
	if !exists {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
		return
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, group := range groups {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(group, group),
		))
	}
	msg := tgbotapi.NewMessage(chatID, "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

// RegistrationProcessCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
func RegistrationProcessCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	if state, exists := userStates[chatID]; exists {
		switch state {
		case StateWaitingForFaculty:
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
			userTempDataMap[chatID].Faculty = data
			// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
			userStates[chatID] = StateWaitingForGroup

			// –û—Ç–≤–µ—Ç –Ω–∞ callback (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –¥–∞—ë—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å)
			bot.Request(tgbotapi.NewCallback(
				callback.ID,
				fmt.Sprintf("‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç '%s' –≤—ã–±—Ä–∞–Ω", data),
			))

			// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
			sendGroupSelection(chatID, data, bot)
			return

		case StateWaitingForGroup:
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
			userTempDataMap[chatID].Group = data
			// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞
			userStates[chatID] = StateWaitingForPass

			// –û—Ç–≤–µ—Ç –Ω–∞ callback
			bot.Request(tgbotapi.NewCallback(
				callback.ID,
				fmt.Sprintf("‚úÖ –ì—Ä—É–ø–ø–∞ '%s' –≤—ã–±—Ä–∞–Ω–∞", data),
			))

			// –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –∏ –≥—Ä—É–ø–ø–µ
			faculty := userTempDataMap[chatID].Faculty
			group := userTempDataMap[chatID].Group

			// –°–æ–æ–±—â–µ–Ω–∏–µ: –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –≤—ã–±—Ä–∞–ª, –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
			messageText := fmt.Sprintf(
				"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: %s\n–ì—Ä—É–ø–ø–∞: %s\n\n"+
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ST-456), —É–±–µ–¥–∏–≤—à–∏—Å—å, —á—Ç–æ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.",
				faculty,
				group,
			)

			bot.Send(tgbotapi.NewMessage(chatID, messageText))
			return
		}
	}
}
