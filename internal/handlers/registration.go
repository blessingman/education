package handlers

import (
	"education/internal/auth"
	"fmt"
	"regexp"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// processRegistrationMessage ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–æ–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
func processRegistrationMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI, state, text string) {
	chatID := update.Message.Chat.ID
	tempData, ok := userTempDataMap[chatID]
	if !ok {
		tempData = &tempUserData{}
		userTempDataMap[chatID] = tempData
	}

	// Trim spaces from input
	text = strings.TrimSpace(text)

	switch state {
	case StateWaitingForPass:
		if tempData.Faculty == "" || tempData.Group == "" {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
			sendAndTrackMessage(bot, msg)
			return
		}

		// Validate registration code format
		if !validateRegCode(text, "ST-") {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: ST-456")
			sendAndTrackMessage(bot, msg)
			return
		}

		// –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É, –≥—Ä—É–ø–ø–µ –∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –∫–æ–¥—É
		userInDB, err := auth.FindUnregisteredUser(tempData.Faculty, tempData.Group, text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}
		if userInDB == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			sendAndTrackMessage(bot, msg)
			return
		}
		tempData.FoundUserID = userInDB.ID
		userStates[chatID] = StateWaitingForPassword
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
		sendAndTrackMessage(bot, msg)
		return

	case StateWaitingForPassword:
		if !validatePassword(text) {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
			sendAndTrackMessage(bot, msg)
			return
		}

		if err := completeRegistration(chatID, tempData.FoundUserID, text, tempData.Faculty, tempData.Group); err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞: %s", err.Error()))
			sendAndTrackMessage(bot, msg)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
		userInDB, _ := auth.GetUserByID(tempData.FoundUserID)

		msg := tgbotapi.NewMessage(chatID, "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
		sendAndTrackMessage(bot, msg)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		sendMainMenu(chatID, bot, userInDB)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
		delete(userStates, chatID)
		delete(userTempDataMap, chatID)
		return

	case StateTeacherWaitingForPass:
		// Validate teacher registration code format
		if !validateRegCode(text, "TH-") {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: TR-345")
			sendAndTrackMessage(bot, msg)
			return
		}

		userInDB, err := auth.FindUnregisteredTeacher(text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}
		if userInDB == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			sendAndTrackMessage(bot, msg)
			return
		}
		if userInDB.Role != "teacher" {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
			sendAndTrackMessage(bot, msg)
			return
		}

		// –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ faculty –≤ –ë–î —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
		if userInDB.Faculty != "" && userInDB.Faculty != tempData.Faculty {
			msg := tgbotapi.NewMessage(chatID,
				fmt.Sprintf("‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏ '%s', –Ω–æ —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É: %s",
					tempData.Faculty, userInDB.Faculty))
			sendAndTrackMessage(bot, msg)
			return
		}

		// –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è
		userTempDataMap[chatID].FoundUserID = userInDB.ID
		userStates[chatID] = StateTeacherWaitingForPassword
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
		sendAndTrackMessage(bot, msg)
		return

	case StateTeacherWaitingForPassword:
		if !validatePassword(text) {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
			sendAndTrackMessage(bot, msg)
			return
		}

		if err := completeTeacherRegistration(chatID, tempData.FoundUserID, text, tempData.Faculty); err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞: %s", err.Error()))
			sendAndTrackMessage(bot, msg)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
		userInDB, _ := auth.GetUserByID(tempData.FoundUserID)

		msg := tgbotapi.NewMessage(chatID, "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
		sendAndTrackMessage(bot, msg)

		sendMainMenu(chatID, bot, userInDB)
		delete(userStates, chatID)
		delete(userTempDataMap, chatID)
		return
	}
}

// Helper functions to reduce code duplication

// validateRegCode validates registration code format
func validateRegCode(code string, prefix string) bool {
	pattern := "^" + prefix + "[0-9]{3,4}$" // Example: ST-123 or TR-1234
	match, _ := regexp.MatchString(pattern, code)
	return match
}

// validatePassword checks if password meets security requirements
func validatePassword(password string) bool {
	// Basic validation - at least 6 characters
	return len(password) >= 6
}

// completeRegistration finalizes the student registration process
func completeRegistration(chatID int64, userID int64, password, faculty, group string) error {
	userInDB, err := auth.GetUserByID(userID)
	if err != nil || userInDB == nil {
		return fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)")
	}

	userInDB.TelegramID = chatID
	userInDB.Password = password // In a production app, this should be hashed
	userInDB.Faculty = faculty
	userInDB.Group = group

	if err := auth.SaveUser(userInDB); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}

	return nil
}

// completeTeacherRegistration finalizes the teacher registration process
func completeTeacherRegistration(chatID int64, userID int64, password, faculty string) error {
	userInDB, err := auth.GetUserByID(userID)
	if err != nil || userInDB == nil {
		return fmt.Errorf("–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)")
	}

	userInDB.TelegramID = chatID
	userInDB.Password = password // In a production app, this should be hashed
	userInDB.Faculty = faculty

	if err := auth.SaveUser(userInDB); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}

	return nil
}

func RegistrationProcessCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	// --- 0) –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ ---
	if data == "cancel_process" {
		edit := tgbotapi.NewEditMessageReplyMarkup(
			chatID,
			callback.Message.MessageID,
			tgbotapi.InlineKeyboardMarkup{},
		)
		bot.Request(edit)

		if userStates[chatID] != "" {
			delete(userStates, chatID)
			delete(userTempDataMap, chatID) // Fixed: proper delete syntax
		}
		if loginStates[chatID] != "" {
			delete(loginStates, chatID)
			delete(loginTempDataMap, chatID) // Fixed: proper delete syntax
		}

		deleteMessages(chatID, bot, 4)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
		sendAndTrackMessage(bot, msg)
		user, _ := auth.GetUserByTelegramID(chatID)
		sendMainMenu(chatID, bot, user)
		return
	}

	// --- 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
	state, exists := userStates[chatID]
	if !exists {
		bot.Request(tgbotapi.NewCallback(callback.ID, "–ù–µ—á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç."))
		return
	}

	// --- 2) –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
	edit := tgbotapi.NewEditMessageReplyMarkup(
		chatID,
		callback.Message.MessageID,
		tgbotapi.InlineKeyboardMarkup{},
	)
	bot.Request(edit)

	// --- 3) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
	switch state {
	case StateWaitingForRole:
		if data == "role_student" {
			userTempDataMap[chatID].Role = "student"
			userStates[chatID] = StateWaitingForFaculty
			bot.Request(tgbotapi.NewCallback(callback.ID, "–°—Ç—É–¥–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω"))
			sendFacultySelection(chatID, bot)
		} else if data == "role_teacher" {
			userTempDataMap[chatID].Role = "teacher"
			userStates[chatID] = StateWaitingForFaculty
			bot.Request(tgbotapi.NewCallback(callback.ID, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω"))
			sendFacultySelection(chatID, bot)
		}

	case StateWaitingForFaculty:
		userTempDataMap[chatID].Faculty = data
		bot.Request(tgbotapi.NewCallback(callback.ID, fmt.Sprintf("‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç '%s' –≤—ã–±—Ä–∞–Ω", data)))
		if userTempDataMap[chatID].Role == "teacher" {
			userStates[chatID] = StateTeacherWaitingForPass
			msg := tgbotapi.NewMessage(chatID, "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TR-345):")
			sendAndTrackMessage(bot, msg)
		} else {
			userStates[chatID] = StateWaitingForGroup
			sendGroupSelection(chatID, userTempDataMap[chatID].Faculty, bot)
		}

	case StateWaitingForGroup:
		userTempDataMap[chatID].Group = data
		userStates[chatID] = StateWaitingForPass
		bot.Request(tgbotapi.NewCallback(callback.ID, fmt.Sprintf("‚úÖ –ì—Ä—É–ø–ø–∞ '%s' –≤—ã–±—Ä–∞–Ω–∞", data)))
		msg := tgbotapi.NewMessage(chatID, "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ST-4506):")
		sendAndTrackMessage(bot, msg)
		return

	case StateWaitingForPass:
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏ –≥—Ä—É–ø–ø–∞
		if userTempDataMap[chatID].Faculty == "" || userTempDataMap[chatID].Group == "" {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
			sendAndTrackMessage(bot, msg)
			return
		}
		// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –∫–æ–¥—É
		userInDB, err := auth.GetUserByRegCode(data)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if userInDB == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			sendAndTrackMessage(bot, msg)
			return
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞
		if userInDB.Group != userTempDataMap[chatID].Group {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –≠—Ç–æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å
		if userInDB.Password != "" {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é '–í—Ö–æ–¥' –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
			sendAndTrackMessage(bot, msg)
			return
		}
		// –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
		userTempDataMap[chatID].FoundUserID = userInDB.ID
		userStates[chatID] = StateWaitingForPassword
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
		sendAndTrackMessage(bot, msg)
		return

	case StateTeacherWaitingForPass:
		// –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –∫–æ–¥—É, –ø—Ä–æ–≤–µ—Ä—è—è, —á—Ç–æ –ø–∞—Ä–æ–ª—å –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		userInDB, err := auth.FindUnregisteredTeacher(data)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}
		if userInDB == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥) –∏–ª–∏ –∫–æ–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
			sendAndTrackMessage(bot, msg)
			return
		}
		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
		if userInDB.Faculty != "" && userInDB.Faculty != userTempDataMap[chatID].Faculty {
			msg := tgbotapi.NewMessage(chatID,
				fmt.Sprintf("‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏ '%s', –Ω–æ —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É: %s",
					userTempDataMap[chatID].Faculty, userInDB.Faculty))
			sendAndTrackMessage(bot, msg)
			return
		}
		// –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
		userTempDataMap[chatID].FoundUserID = userInDB.ID
		userStates[chatID] = StateTeacherWaitingForPassword
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
		sendAndTrackMessage(bot, msg)
		return

	case StateWaitingForPassword, StateTeacherWaitingForPassword:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
		if userTempDataMap[chatID].FoundUserID == 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /register.")
			sendAndTrackMessage(bot, msg)
			return
		}
		userInDB, err := auth.GetUserByID(userTempDataMap[chatID].FoundUserID)
		if err != nil || userInDB == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω).")
			sendAndTrackMessage(bot, msg)
			return
		}
		userInDB.TelegramID = chatID
		userInDB.Password = data

		if userTempDataMap[chatID].Role != "teacher" {
			userInDB.Faculty = userTempDataMap[chatID].Faculty
			userInDB.Group = userTempDataMap[chatID].Group
		}
		if err := auth.SaveUser(userInDB); err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}

		sendMainMenu(chatID, bot, userInDB)
		delete(userStates, chatID)
		delete(userTempDataMap, chatID)
		return
	}
}
