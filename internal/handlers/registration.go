package handlers

import (
	"fmt"

	"education/internal/auth"
	// –§—É–Ω–∫—Ü–∏–∏ GetAllFaculties –∏ GetGroupsByFaculty –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ faculty.go
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// processRegistrationMessage ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–æ–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
// processRegistrationMessage ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–æ–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
// processRegistrationMessage ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–æ–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
// processRegistrationMessage ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–æ–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
// processRegistrationMessage ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–æ–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
// processRegistrationMessage ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–æ–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
func processRegistrationMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI, state, text string) {
	chatID := update.Message.Chat.ID
	tempData, ok := userTempDataMap[chatID]
	if !ok {
		tempData = &tempUserData{}
		userTempDataMap[chatID] = tempData
	}

	switch state {
	case StateWaitingForPass:
		if tempData.Faculty == "" || tempData.Group == "" {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
			sendAndTrackMessage(bot, msg)
			return
		}
		userInDB, err := auth.FindUnregisteredUser(tempData.Faculty, tempData.Group, text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}
		if userInDB == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			sendAndTrackMessage(bot, msg)
			return
		}
		tempData.FoundUserID = userInDB.ID
		userStates[chatID] = StateWaitingForPassword
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
		sendAndTrackMessage(bot, msg)
		return

	case StateWaitingForPassword:
		if tempData.FoundUserID == 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /register.")
			sendAndTrackMessage(bot, msg)
			return
		}
		userInDB, err := auth.GetUserByID(tempData.FoundUserID)
		if err != nil || userInDB == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω).")
			sendAndTrackMessage(bot, msg)
			return
		}
		userInDB.TelegramID = chatID
		userInDB.Password = text
		userInDB.Faculty = tempData.Faculty // –ü–µ—Ä–µ–Ω–æ—Å–∏–º Faculty
		userInDB.Group = tempData.Group     // –ü–µ—Ä–µ–Ω–æ—Å–∏–º Group
		if err := auth.SaveUser(userInDB); err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
		sendMainMenu(chatID, bot, userInDB)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
		delete(userStates, chatID)
		delete(userTempDataMap, chatID)
		return

	case StateTeacherWaitingForPass:
		userInDB, err := auth.GetUserByRegCode(text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}
		if userInDB == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			sendAndTrackMessage(bot, msg)
			return
		}
		if userInDB.Role != "teacher" {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
			sendAndTrackMessage(bot, msg)
			return
		}
		if userInDB.TelegramID != 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
			sendAndTrackMessage(bot, msg)
			return
		}
		tempData.FoundUserID = userInDB.ID
		userStates[chatID] = StateTeacherWaitingForPassword
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
		sendAndTrackMessage(bot, msg)
		return

	case StateTeacherWaitingForPassword:
		if tempData.FoundUserID == 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /register.")
			sendAndTrackMessage(bot, msg)
			return
		}
		userInDB, err := auth.GetUserByID(tempData.FoundUserID)
		if err != nil || userInDB == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω).")
			sendAndTrackMessage(bot, msg)
			return
		}
		userInDB.TelegramID = chatID
		userInDB.Password = text
		if err := auth.SaveUser(userInDB); err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
		sendMainMenu(chatID, bot, userInDB)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
		delete(userStates, chatID)
		delete(userTempDataMap, chatID)
		return
	}
}

func RegistrationProcessCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	// --- 0) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´–û—Ç–º–µ–Ω–∞¬ª ---
	if data == "cancel_process" {
		// –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏)
		edit := tgbotapi.NewEditMessageReplyMarkup(
			chatID,
			callback.Message.MessageID,
			tgbotapi.InlineKeyboardMarkup{},
		)
		bot.Request(edit)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		if userStates[chatID] != "" {
			delete(userStates, chatID)
			delete(userTempDataMap, chatID)
		}
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–Ω –±—ã–ª)
		if loginStates[chatID] != "" {
			delete(loginStates, chatID)
			delete(loginTempDataMap, chatID)
		}

		// –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
		deleteMessages(chatID, bot, 4)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
		sendAndTrackMessage(bot, msg)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		user, _ := auth.GetUserByTelegramID(chatID)
		sendMainMenu(chatID, bot, user)
		return
	}

	// --- 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
	state, exists := userStates[chatID]
	if !exists {
		bot.Request(tgbotapi.NewCallback(callback.ID, "–ù–µ—á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç."))
		return
	}

	// --- 2) –£–¥–∞–ª—è–µ–º inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è,
	//         —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ---
	edit := tgbotapi.NewEditMessageReplyMarkup(
		chatID,
		callback.Message.MessageID,
		tgbotapi.InlineKeyboardMarkup{},
	)
	bot.Request(edit)

	// --- 3) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç state ---
	switch state {
	case StateWaitingForRole:
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–æ–ª—å
		if data == "role_student" {
			userTempDataMap[chatID].Role = "student"
			userStates[chatID] = StateWaitingForFaculty
			bot.Request(tgbotapi.NewCallback(callback.ID, "–°—Ç—É–¥–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω"))
			sendFacultySelection(chatID, bot)

		} else if data == "role_teacher" {
			userTempDataMap[chatID].Role = "teacher"
			userStates[chatID] = StateTeacherWaitingForPass
			bot.Request(tgbotapi.NewCallback(callback.ID, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω"))
			msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TR-345):")
			sendAndTrackMessage(bot, msg)
		}

	case StateWaitingForFaculty:
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
		userTempDataMap[chatID].Faculty = data
		userStates[chatID] = StateWaitingForGroup
		bot.Request(tgbotapi.NewCallback(callback.ID, fmt.Sprintf("‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç '%s' –≤—ã–±—Ä–∞–Ω", data)))
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
		sendGroupSelection(chatID, userTempDataMap[chatID].Faculty, bot)

	case StateWaitingForGroup:
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É
		userTempDataMap[chatID].Group = data
		userStates[chatID] = StateWaitingForPass
		bot.Request(tgbotapi.NewCallback(callback.ID, fmt.Sprintf("‚úÖ –ì—Ä—É–ø–ø–∞ '%s' –≤—ã–±—Ä–∞–Ω–∞", data)))
		msg := tgbotapi.NewMessage(chatID, "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ST-456):")
		sendAndTrackMessage(bot, msg)

	default:
		// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –æ–∂–∏–¥–∞–µ–º–æ–º—É —à–∞–≥—É
		bot.Request(tgbotapi.NewCallback(callback.ID, "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."))
	}
}

// sendRoleSelection ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.
// sendRoleSelection ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.
func sendRoleSelection(chatID int64, bot *tgbotapi.BotAPI) {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°—Ç—É–¥–µ–Ω—Ç", "role_student"),
		tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "role_teacher"),
	))

	// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "cancel_process"),
	))

	msg := tgbotapi.NewMessage(chatID, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	sendAndTrackMessage(bot, msg)
}

// sendFacultySelection ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
// sendFacultySelection ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
func sendFacultySelection(chatID int64, bot *tgbotapi.BotAPI) {
	facs := GetFaculties()
	if len(facs) == 0 {
		var err error
		facs, err = GetAllFaculties()
		if err != nil || len(facs) == 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
			sendAndTrackMessage(bot, msg)
			return
		}
		SetFaculties(facs)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, f := range facs {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(f, f),
		)
		rows = append(rows, row)
	}

	// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "cancel_process"),
	))

	msg := tgbotapi.NewMessage(chatID, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	sendAndTrackMessage(bot, msg)
}

// sendGroupSelection ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
// sendGroupSelection ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
func sendGroupSelection(chatID int64, facultyName string, bot *tgbotapi.BotAPI) {
	groups := GetGroups(facultyName)
	if len(groups) == 0 {
		var err error
		groups, err = GetGroupsByFaculty(facultyName)
		if err != nil || len(groups) == 0 {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ "+facultyName+".")
			sendAndTrackMessage(bot, msg)
			return
		}
		SetGroups(facultyName, groups)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, g := range groups {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(g, g),
		)
		rows = append(rows, row)
	}

	// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "cancel_process"),
	))

	msg := tgbotapi.NewMessage(chatID, "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	sendAndTrackMessage(bot, msg)
}
