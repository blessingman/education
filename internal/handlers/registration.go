package handlers

import (
	"fmt"

	"education/internal/auth"
	// –§—É–Ω–∫—Ü–∏–∏ GetAllFaculties –∏ GetGroupsByFaculty –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ faculty.go
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// processRegistrationMessage ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–æ–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã).
func processRegistrationMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI, state, text string) {
	chatID := update.Message.Chat.ID
	tempData, ok := userTempDataMap[chatID]
	if !ok {
		tempData = &tempUserData{}
		userTempDataMap[chatID] = tempData
	}

	switch state {
	case StateWaitingForPass:
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç registration_code (–ø—Ä–æ–ø—É—Å–∫)
		if tempData.Faculty == "" || tempData.Group == "" {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."))
			return
		}
		// –ò—â–µ–º ¬´seed¬ª-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (telegram_id=0) –≤ –ë–î, —É –∫–æ—Ç–æ—Ä–æ–≥–æ group_name=? –∏ registration_code=?
		userInDB, err := auth.FindUnregisteredUser(tempData.Faculty, tempData.Group, text)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}
		if userInDB == nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."))
			return
		}
		// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		tempData.FoundUserID = userInDB.ID

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è
		userStates[chatID] = StateWaitingForPassword
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:"))
		return

	case StateWaitingForPassword:
		// –ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–∞—Ä–æ–ª—å
		if tempData.FoundUserID == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /register."))
			return
		}
		userInDB, err := auth.GetUserByID(tempData.FoundUserID)
		if err != nil || userInDB == nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)."))
			return
		}
		userInDB.TelegramID = chatID
		userInDB.Password = text
		if err := auth.SaveUser(userInDB); err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}

		finalMsg := fmt.Sprintf(
			"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüë§ –§–ò–û: %s\nüè´ –§–∞–∫—É–ª—å—Ç–µ—Ç: %s\nüìö –ì—Ä—É–ø–ø–∞: %s\nüîë –†–æ–ª—å: %s",
			userInDB.Name,
			tempData.Faculty,
			userInDB.Group,
			userInDB.Role,
		)
		bot.Send(tgbotapi.NewMessage(chatID, finalMsg))

		delete(userStates, chatID)
		delete(userTempDataMap, chatID)
		return
	}
}

// RegistrationProcessCallback ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ / –≥—Ä—É–ø–ø—ã.
func RegistrationProcessCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	// –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if state, exists := userStates[chatID]; !exists {
		bot.Request(tgbotapi.NewCallback(callback.ID, "–ù–µ—á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç."))
		return
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
		edit := tgbotapi.NewEditMessageReplyMarkup(chatID, callback.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
		bot.Request(edit)

		switch state {
		case StateWaitingForFaculty:
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
			userTempDataMap[chatID].Faculty = data
			userStates[chatID] = StateWaitingForGroup

			bot.Request(tgbotapi.NewCallback(callback.ID, fmt.Sprintf("‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç '%s' –≤—ã–±—Ä–∞–Ω", data)))
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
			sendGroupSelection(chatID, data, bot)
		case StateWaitingForGroup:
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É
			userTempDataMap[chatID].Group = data
			userStates[chatID] = StateWaitingForPass

			bot.Request(tgbotapi.NewCallback(callback.ID, fmt.Sprintf("‚úÖ –ì—Ä—É–ø–ø–∞ '%s' –≤—ã–±—Ä–∞–Ω–∞", data)))
			bot.Send(tgbotapi.NewMessage(chatID, "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ST-456):"))
		default:
			// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –æ–∂–∏–¥–∞–µ–º–æ–º—É —à–∞–≥—É
			bot.Request(tgbotapi.NewCallback(callback.ID, "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."))
		}
	}
}

// sendFacultySelection ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º in‚Äëmemory –∫—ç—à–∞.
func sendFacultySelection(chatID int64, bot *tgbotapi.BotAPI) {
	// –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –∏–∑ –∫—ç—à–∞.
	facs := GetFaculties()
	if len(facs) == 0 {
		// –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
		var err error
		facs, err = GetAllFaculties()
		if err != nil || len(facs) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞."))
			return
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
		SetFaculties(facs)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, f := range facs {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(f, f),
		)
		rows = append(rows, row)
	}

	msg := tgbotapi.NewMessage(chatID, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

// sendGroupSelection ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º in‚Äëmemory –∫—ç—à–∞.
func sendGroupSelection(chatID int64, facultyName string, bot *tgbotapi.BotAPI) {
	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏–∑ –∫—ç—à–∞.
	groups := GetGroups(facultyName)
	if len(groups) == 0 {
		var err error
		groups, err = GetGroupsByFaculty(facultyName)
		if err != nil || len(groups) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ "+facultyName+"."))
			return
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
		SetGroups(facultyName, groups)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, g := range groups {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(g, g),
		)
		rows = append(rows, row)
	}

	msg := tgbotapi.NewMessage(chatID, "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}
