package handlers

import (
	"education/internal/models"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ProcessMessage ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
// –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.
// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –∫–æ–º–∞–Ω–¥—ã /register –∏ /login –≤—ã–¥–∞–¥—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
func ProcessMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if update.Message == nil {
		return
	}
	chatID := update.Message.Chat.ID
	text := strings.TrimSpace(update.Message.Text)

	// ----------------------
	// 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Ö–æ–¥–∞
	// ----------------------
	if state, ok := loginStates[chatID]; ok {
		// –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ /cancel
		if update.Message.IsCommand() {
			if update.Message.Command() == "cancel" {
				delete(loginStates, chatID)
				delete(loginTempDataMap, chatID)
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω."))
			} else {
				// –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Ö–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."))
			}
			return
		}
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞
		processLoginMessage(update, bot, state, text)
		return
	}

	// ----------------------
	// 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	// ----------------------
	if state, ok := userStates[chatID]; ok {
		// –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ /cancel
		if update.Message.IsCommand() {
			if update.Message.Command() == "cancel" {
				delete(userStates, chatID)
				delete(userTempDataMap, chatID)
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ë–Ω."))
			} else {
				// –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."))
			}
			return
		}
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		processRegistrationMessage(update, bot, state, text)
		return
	}

	// ----------------------
	// 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤–æ—à—ë–ª)
	// ----------------------
	if _, registered := models.UsersMap[chatID]; registered {
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "register":
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."))
			case "login":
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."))
			case "logout":
				delete(models.UsersMap, chatID)
				bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."))
			case "cancel":
				bot.Send(tgbotapi.NewMessage(chatID, "‚Ñπ –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å, –≤—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏."))
			default:
				bot.Send(tgbotapi.NewMessage(chatID, "ü§∑ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."))
			}
		} else {
			// –õ—é–±—ã–µ –Ω–µ–∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –ª–∏–±–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ª–∏–±–æ –¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
			bot.Send(tgbotapi.NewMessage(chatID, "‚Ñπ –í—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏, –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã."))
		}
		return
	}

	// ----------------------
	// 4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ
	// ----------------------
	if update.Message.IsCommand() {
		switch update.Message.Command() {
		case "start":
			bot.Send(tgbotapi.NewMessage(chatID, "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /login –¥–ª—è –≤—Ö–æ–¥–∞."))
		case "register":
			userStates[chatID] = StateWaitingForFaculty
			userTempDataMap[chatID] = &tempUserData{}
			sendFacultySelection(chatID, bot)
		case "login":
			loginStates[chatID] = LoginStateWaitingForRegCode
			loginTempDataMap[chatID] = &loginData{}
			bot.Send(tgbotapi.NewMessage(chatID, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–ø—É—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥):"))
		case "logout":
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É."))
		case "cancel":
			bot.Send(tgbotapi.NewMessage(chatID, "‚Ñπ –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å, –≤—ã –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ."))
		default:
			bot.Send(tgbotapi.NewMessage(chatID, "ü§∑ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."))
		}
	} else {
		bot.Send(tgbotapi.NewMessage(chatID, "‚Ñπ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login"))
	}
}

// ProcessCallback ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback‚Äë–∑–∞–ø—Ä–æ—Å–æ–≤.
// –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ RegistrationProcessCallback.
func ProcessCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	RegistrationProcessCallback(callback, bot)
}
