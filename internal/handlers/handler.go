package handlers

import (
	"education/internal/auth"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ProcessMessage ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
// –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤—Ö–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç "–≤ —Å–∏—Å—Ç–µ–º–µ" —á–µ—Ä–µ–∑ –±–∞–∑—É.
// ProcessMessage ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
// 1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (loginStates / userStates).
// 2) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ "–≤ —Å–∏—Å—Ç–µ–º–µ" (user != nil), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /logout.
// 3) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /register /login.
func ProcessMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if update.Message == nil {
		return
	}
	chatID := update.Message.Chat.ID
	text := strings.TrimSpace(update.Message.Text)

	// A. –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ –ª–æ–≥–∏–Ω–∞?
	if state, ok := loginStates[chatID]; ok {
		// –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ /cancel
		if update.Message.IsCommand() {
			if update.Message.Command() == "cancel" {
				delete(loginStates, chatID)
				delete(loginTempDataMap, chatID)
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Ö–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."))
			}
			return
		}
		processLoginMessage(update, bot, state, text)
		return
	}

	// B. –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?
	if state, ok := userStates[chatID]; ok {
		// –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ /cancel
		if update.Message.IsCommand() {
			if update.Message.Command() == "cancel" {
				delete(userStates, chatID)
				delete(userTempDataMap, chatID)
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ë–Ω."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."))
			}
			return
		}
		processRegistrationMessage(update, bot, state, text)
		return
	}

	// C. –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–≤ —Å–∏—Å—Ç–µ–º–µ"?
	user, err := auth.GetUserByTelegramID(chatID)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	if user != nil {
		// –£–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "register":
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."))
			case "login":
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."))
			case "logout":
				// –í—ã—à–ª–∏ ‚Üí telegram_id=0
				user.TelegramID = 0
				_ = auth.SaveUser(user) // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É
				bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."))
			case "cancel":
				bot.Send(tgbotapi.NewMessage(chatID, "‚Ñπ –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å, –≤—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏."))
			default:
				bot.Send(tgbotapi.NewMessage(chatID, "ü§∑ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."))
			}
		} else {
			// –Ω–µ –∫–æ–º–∞–Ω–¥–∞ ‚Üí –º–æ–∂–µ–º –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å
			bot.Send(tgbotapi.NewMessage(chatID, "‚Ñπ –í—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏, –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã."))
		}
		return
	}

	// D. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ
	if update.Message.IsCommand() {
		switch update.Message.Command() {
		case "start":
			bot.Send(tgbotapi.NewMessage(chatID, "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /login –¥–ª—è –≤—Ö–æ–¥–∞."))
		case "register":
			userStates[chatID] = StateWaitingForFaculty
			userTempDataMap[chatID] = &tempUserData{}
			sendFacultySelection(chatID, bot)
		case "login":
			loginStates[chatID] = LoginStateWaitingForRegCode
			loginTempDataMap[chatID] = &loginData{}
			bot.Send(tgbotapi.NewMessage(chatID, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–ø—É—Å–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥):"))
		case "logout":
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É."))
		case "cancel":
			bot.Send(tgbotapi.NewMessage(chatID, "‚Ñπ –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å, –≤—ã –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ."))
		default:
			bot.Send(tgbotapi.NewMessage(chatID, "ü§∑ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."))
		}
	} else {
		bot.Send(tgbotapi.NewMessage(chatID, "‚Ñπ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login"))
	}
}

// ProcessCallback ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback‚Äë–∑–∞–ø—Ä–æ—Å—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞/–≥—Ä—É–ø–ø—ã).
func ProcessCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	RegistrationProcessCallback(callback, bot)
}
