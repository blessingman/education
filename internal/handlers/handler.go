package handlers

import (
	"education/internal/auth"
	"education/internal/models"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// sendMainMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç.
func sendMainMenu(chatID int64, bot *tgbotapi.BotAPI, user *models.User) {
	var rows [][]tgbotapi.InlineKeyboardButton

	if user == nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª –∏ ¬´–í—Ö–æ–¥¬ª
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "menu_register"),
			tgbotapi.NewInlineKeyboardButtonData("–í—Ö–æ–¥", "menu_login"),
		))
	} else {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª, ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª –∏ ¬´–í—ã—Ö–æ–¥¬ª
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "menu_schedule"),
			tgbotapi.NewInlineKeyboardButtonData("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "menu_materials"),
		))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í—ã—Ö–æ–¥", "menu_logout"),
		))
	}

	// ¬´–°–ø—Ä–∞–≤–∫–∞¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°–ø—Ä–∞–≤–∫–∞", "menu_help"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// ProcessMessage ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
func ProcessMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if update.Message == nil {
		return
	}
	chatID := update.Message.Chat.ID
	text := strings.TrimSpace(update.Message.Text)

	// A. –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ –ª–æ–≥–∏–Ω–∞?
	if state, ok := loginStates[chatID]; ok {
		processLoginMessage(update, bot, state, text)
		return
	}

	// B. –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?
	if state, ok := userStates[chatID]; ok {
		processRegistrationMessage(update, bot, state, text)
		return
	}

	// C. –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
	user, err := auth.GetUserByTelegramID(chatID)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	// D. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start –∏ —Ç.–ø.
	if update.Message.IsCommand() {
		switch update.Message.Command() {
		case "start":
			sendMainMenu(chatID, bot, user)
			return
		default:
			sendMainMenu(chatID, bot, user)
			return
		}
	} else {
		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
		sendMainMenu(chatID, bot, user)
		return
	}
}

// ProcessCallback ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback‚Äë–∑–∞–ø—Ä–æ—Å—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é + –≤—ã–∑–æ–≤ RegistrationProcessCallback).
func ProcessCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID

	switch callback.Data {

	// --- –ú–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö ---
	case "menu_register":
		userStates[chatID] = StateWaitingForFaculty
		userTempDataMap[chatID] = &tempUserData{}
		bot.Request(tgbotapi.NewCallback(callback.ID, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"))
		sendFacultySelection(chatID, bot)
		return

	case "menu_login":
		loginStates[chatID] = LoginStateWaitingForRegCode
		loginTempDataMap[chatID] = &loginData{}
		bot.Request(tgbotapi.NewCallback(callback.ID, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ö–æ–¥—É"))
		bot.Send(tgbotapi.NewMessage(chatID, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥:"))
		return

	// --- –ú–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö ---
	case "menu_schedule":
		bot.Request(tgbotapi.NewCallback(callback.ID, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
		bot.Send(tgbotapi.NewMessage(chatID, "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: (–∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)"))
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
		user, _ := auth.GetUserByTelegramID(chatID)
		sendMainMenu(chatID, bot, user)
		return

	case "menu_materials":
		bot.Request(tgbotapi.NewCallback(callback.ID, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
		bot.Send(tgbotapi.NewMessage(chatID, "–°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: (–∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)"))
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
		user, _ := auth.GetUserByTelegramID(chatID)
		sendMainMenu(chatID, bot, user)
		return

	case "menu_logout":
		user, err := auth.GetUserByTelegramID(chatID)
		if err != nil || user == nil {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"))
		} else {
			user.TelegramID = 0
			_ = auth.SaveUser(user)
			bot.Request(tgbotapi.NewCallback(callback.ID, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"))
			bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."))
		}
		// –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
		sendMainMenu(chatID, bot, nil)
		return

	case "menu_help":
		bot.Request(tgbotapi.NewCallback(callback.ID, "–°–ø—Ä–∞–≤–∫–∞"))
		bot.Send(tgbotapi.NewMessage(chatID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"+
			"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –í—Ö–æ–¥ ‚Äî –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö\n"+
			"‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ / –ú–∞—Ç–µ—Ä–∏–∞–ª—ã / –í—ã—Ö–æ–¥ ‚Äî –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö\n"+
			"‚Ä¢ –°–ø—Ä–∞–≤–∫–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"))
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
		user, _ := auth.GetUserByTelegramID(chatID)
		sendMainMenu(chatID, bot, user)
		return
	}

	// –ï—Å–ª–∏ callback –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é, –ø–µ—Ä–µ–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞/–≥—Ä—É–ø–ø—ã).
	RegistrationProcessCallback(callback, bot)
}

// --- –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ---
// –ï—Å–ª–∏ —É –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏–∏ sendFacultySelection –∏ RegistrationProcessCallback —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ,
// —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≥–ª—É—à–∫–∏:
