package handlers

import (
	"education/internal/auth"
	"education/internal/models"
	"fmt"
	"strconv"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	greetedUsers   = make(map[int64]bool)
	greetedUsersMu sync.RWMutex
	// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Å–µ—Ö MessageID —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º
	chatMessages   = make(map[int64][]int) // chatID -> []MessageID
	chatMessagesMu sync.RWMutex
)

// sendMessageAndTrack –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ MessageID –≤ tempUserData –∏–ª–∏ loginData

// sendAndTrackMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ MessageID –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
func sendAndTrackMessage(bot *tgbotapi.BotAPI, msg tgbotapi.MessageConfig) error {
	sentMsg, err := bot.Send(msg)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º MessageID –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	chatMessagesMu.Lock()
	chatMessages[msg.ChatID] = append(chatMessages[msg.ChatID], sentMsg.MessageID)
	chatMessagesMu.Unlock()

	return nil
}

// deleteMessages —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º
// deleteMessages —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º chatID
func deleteMessages(chatID int64, bot *tgbotapi.BotAPI, delay time.Duration) {
	chatMessagesMu.Lock()
	defer chatMessagesMu.Unlock()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ MessageID –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chatID
	msgIDs, exists := chatMessages[chatID]
	if !exists {
		return // –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	}

	// –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
	if delay > 0 {
		time.Sleep(delay)
	}

	// –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	for _, msgID := range msgIDs {
		delMsg := tgbotapi.NewDeleteMessage(chatID, msgID)
		if _, err := bot.Request(delMsg); err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
	}

	// –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ MessageID –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chatID
	chatMessages[chatID] = nil
}

// sendMainMenu —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∞ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª + Inline-–∫–Ω–æ–ø–∫–∏),
// —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ –∏ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö.
func sendMainMenu(chatID int64, bot *tgbotapi.BotAPI, user *models.User) {
	// –ö–Ω–æ–ø–∫–∞ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
	replyKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	replyKeyboard.OneTimeKeyboard = false
	replyKeyboard.ResizeKeyboard = true

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	greetedUsersMu.RLock()
	alreadyGreeted := greetedUsers[chatID]
	greetedUsersMu.RUnlock()

	var firstMsgText string
	if !alreadyGreeted {
		firstMsgText = "–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–∂–º–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –¥–µ–π—Å—Ç–≤–∏–π."
		greetedUsersMu.Lock()
		greetedUsers[chatID] = true
		greetedUsersMu.Unlock()
	} else if user != nil {
		if user.Role == "teacher" {
			// –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∫—É—Ä—Å–æ–≤ –∏ –≥—Ä—É–ø–ø
			firstMsgText = fmt.Sprintf("üë§ –ü—Ä–∏–≤–µ—Ç, %s!\nüè´ –§–∞–∫—É–ª—å—Ç–µ—Ç: %s\nüîë –†–æ–ª—å: %s",
				user.Name, user.Faculty, user.Role)
		} else {
			// –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
			firstMsgText = fmt.Sprintf("üë§ –ü—Ä–∏–≤–µ—Ç, %s!\nüè´ –§–∞–∫—É–ª—å—Ç–µ—Ç: %s\nüìö –ì—Ä—É–ø–ø–∞: %s\nüîë –†–æ–ª—å: %s",
				user.Name, user.Faculty, user.Group, user.Role)
		}
	} else {
		firstMsgText = "ü§ñ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ."
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
	msg1 := tgbotapi.NewMessage(chatID, firstMsgText)
	msg1.ReplyMarkup = replyKeyboard
	sendAndTrackMessage(bot, msg1)

	// –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
	var rows [][]tgbotapi.InlineKeyboardButton

	if user == nil {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "menu_register"),
			tgbotapi.NewInlineKeyboardButtonData("üîë –í—Ö–æ–¥", "menu_login"),
		))
	} else {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "menu_schedule"),
			tgbotapi.NewInlineKeyboardButtonData("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "menu_materials"),
		))
		if user.Role == "teacher" {
			// –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìã –ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –≥—Ä—É–ø–ø—ã", "menu_teacher_courses"),
			))
			// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "menu_edit_schedule"),
				tgbotapi.NewInlineKeyboardButtonData("üõ† –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "menu_edit_materials"),
			))
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üö™ –í—ã—Ö–æ–¥", "menu_logout"),
		))
	}

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg2 := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg2.ReplyMarkup = inlineKeyboard
	sendAndTrackMessage(bot, msg2)
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (ProcessMessage, ProcessCallback) –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
// –∏–ª–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Ç–æ–∂–µ –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π.

// ProcessMessage ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –Ω–∞–∂–∞—Ç–∏–µ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª).
func ProcessMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if update.Message == nil {
		return
	}
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª (ReplyKeyboard)
	if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" {
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ª–æ–≥–∏–Ω –∏ —Ç.–¥.)
		if userStates[chatID] != "" {
			delete(userStates, chatID)
			delete(userTempDataMap, chatID)
		}
		if loginStates[chatID] != "" {
			delete(loginStates, chatID)
			delete(loginTempDataMap, chatID)
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
		user, _ := auth.GetUserByTelegramID(chatID)
		sendMainMenu(chatID, bot, user)
		return
	}

	// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ /cancel ---
	if update.Message.IsCommand() && update.Message.Command() == "cancel" {
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
		if userStates[chatID] != "" {
			delete(userStates, chatID)
			delete(userTempDataMap, chatID)
		}
		if loginStates[chatID] != "" {
			delete(loginStates, chatID)
			delete(loginTempDataMap, chatID)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
		sendAndTrackMessage(bot, msg)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
		user, _ := auth.GetUserByTelegramID(chatID)
		sendMainMenu(chatID, bot, user)
		return
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–æ–≥–∏–Ω–∞
	if state, ok := loginStates[chatID]; ok {
		processLoginMessage(update, bot, state, text)
		return
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if state, ok := userStates[chatID]; ok {
		processRegistrationMessage(update, bot, state, text)
		return
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤—ë–ª –ª–∏ –æ–Ω –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É
	if update.Message.IsCommand() {
		switch update.Message.Command() {
		case "start":
			user, _ := auth.GetUserByTelegramID(chatID)
			sendMainMenu(chatID, bot, user)
			return
		case "logout":
			user, err := auth.GetUserByTelegramID(chatID)
			if err != nil || user == nil {
				msg := tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
				sendAndTrackMessage(bot, msg)
			} else {
				user.TelegramID = 0
				_ = auth.SaveUser(user)
				deleteMessages(chatID, bot, 4*time.Second) // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
				msg := tgbotapi.NewMessage(chatID, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏. –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!")
				sendAndTrackMessage(bot, msg)
				sendMainMenu(chatID, bot, nil)
			}
			return
		default:
			user, _ := auth.GetUserByTelegramID(chatID)
			sendMainMenu(chatID, bot, user)
			return
		}
	} else {
		// –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äì –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ
		user, _ := auth.GetUserByTelegramID(chatID)
		sendMainMenu(chatID, bot, user)
		return
	}
}

// ProcessCallback ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—Ö–æ–¥–∞, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Ç.–¥.).
func ProcessCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
	if strings.HasPrefix(data, "schedule_page_") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
		pageStr := strings.TrimPrefix(data, "schedule_page_")
		newPage, err := strconv.Atoi(pageStr)
		if err != nil {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"))
			return
		}

		// –ó–∞–¥–∞—ë–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
		limit := 5
		offset := (newPage - 1) * limit

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user, err := auth.GetUserByTelegramID(chatID)
		if err != nil || user == nil {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
			return
		}

		// –í—ã–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var schedules []models.Schedule
		var totalRecords int
		if user.Role == "teacher" {
			schedules, err = GetScheduleByTeacherPaginated(user.RegistrationCode, limit, offset)
			if err != nil {
				bot.Request(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"))
				return
			}
			totalRecords, err = CountSchedulesByTeacher(user.RegistrationCode)
		} else {
			schedules, err = GetScheduleByGroupPaginated(user.Group, limit, offset)
			if err != nil {
				bot.Request(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"))
				return
			}
			totalRecords, err = CountSchedulesByGroup(user.Group)
		}
		if err != nil {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –∑–∞–ø–∏—Å–µ–π"))
			return
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
		totalPages := (totalRecords + limit - 1) / limit

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
		newText := FormatPaginatedSchedules(schedules, newPage, totalPages, user.Role, user)
		// –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä—è–º–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –Ω–æ–º–µ—Ä–∞–º —Å—Ç—Ä–∞–Ω–∏—Ü)
		newKeyboard := BuildPaginationKeyboardWithNumbers(newPage, totalPages, "schedule")

		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
		editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, newText)
		editMsg.ParseMode = "HTML" // –∏–ª–∏ "Markdown", –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
		editMsg.ReplyMarkup = &newKeyboard

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if _, err := bot.Send(editMsg); err != nil {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"))
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback –æ—Ç–≤–µ—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
		bot.Request(tgbotapi.NewCallback(callback.ID, ""))
		return
	}
	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–ª–æ–≥–∏–Ω–∞, –Ω–µ –¥–∞—ë–º –Ω–∞—á–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å
	if userStates[chatID] != "" || loginStates[chatID] != "" {
		switch callback.Data {
		case "menu_register", "menu_login":
			bot.Request(tgbotapi.NewCallback(callback.ID,
				"–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel."))
			return
		}
	}

	switch callback.Data {
	case "menu_register":
		userStates[chatID] = StateWaitingForRole
		userTempDataMap[chatID] = &tempUserData{}
		bot.Request(tgbotapi.NewCallback(callback.ID, "üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"))
		sendRoleSelection(chatID, bot)
		return

	case "menu_login":
		loginStates[chatID] = LoginStateWaitingForRegCode
		loginTempDataMap[chatID] = &loginData{}
		bot.Request(tgbotapi.NewCallback(callback.ID, "üîë –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥..."))
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥:")
		sendAndTrackMessage(bot, msg)
		return

	case "menu_schedule":
		bot.Request(tgbotapi.NewCallback(callback.ID, "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
		user, _ := auth.GetUserByTelegramID(chatID)
		if err := ShowSchedule(chatID, bot, user); err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", err)
		}
		return

	case "menu_materials":
		bot.Request(tgbotapi.NewCallback(callback.ID, "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
		user, _ := auth.GetUserByTelegramID(chatID)
		if err := ShowMaterials(chatID, bot, user); err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", err)
		}
		return

	case "menu_logout":
		user, err := auth.GetUserByTelegramID(chatID)
		if err != nil || user == nil {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã."))
		} else {
			user.TelegramID = 0
			_ = auth.SaveUser(user)
			bot.Request(tgbotapi.NewCallback(callback.ID, "üö™ –í—ã—Ö–æ–¥"))
			msg := tgbotapi.NewMessage(chatID, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏. –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!")
			sendAndTrackMessage(bot, msg)
			// –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
			deleteMessages(chatID, bot, 4*time.Second)
		}
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		sendMainMenu(chatID, bot, nil)
		return

	case "menu_help":
		bot.Request(tgbotapi.NewCallback(callback.ID, "‚ùì –°–ø—Ä–∞–≤–∫–∞"))
		msg := tgbotapi.NewMessage(chatID,
			"–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"+
				"‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç—ã: —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"+
				"‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: –ø–ª—é—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"+
				"‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´–í—ã—Ö–æ–¥¬ª –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É\n"+
				"‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∂–º–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞")
		sendAndTrackMessage(bot, msg)
		return

	case "menu_edit_schedule":
		user, err := auth.GetUserByTelegramID(chatID)
		if err != nil || user == nil || user.Role != "teacher" {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."))
			return
		}
		bot.Request(tgbotapi.NewCallback(callback.ID, "üõ† –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è..."))
		msg := tgbotapi.NewMessage(chatID, "–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ-—Å–≤–æ–µ–º—É).")
		sendAndTrackMessage(bot, msg)
		return

	case "menu_edit_materials":
		user, err := auth.GetUserByTelegramID(chatID)
		if err != nil || user == nil || user.Role != "teacher" {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."))
			return
		}
		bot.Request(tgbotapi.NewCallback(callback.ID, "üõ† –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."))
		msg := tgbotapi.NewMessage(chatID, "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ-—Å–≤–æ–µ–º—É).")
		sendAndTrackMessage(bot, msg)
		return
	case "menu_teacher_courses":
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatID
		user, err := auth.GetUserByTelegramID(chatID)
		if err != nil || user == nil || user.Role != "teacher" {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"))
			return
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º registration_code –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
		courses, err := GetCoursesByTeacherRegCode(user.RegistrationCode)
		if err != nil {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤"))
			return
		}
		groups, err := GetTeacherGroupsByRegCode(user.RegistrationCode)
		if err != nil {
			bot.Request(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø"))
			return
		}

		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∫—É—Ä—Å–∞
		courseGroups := make(map[int64][]string)
		for _, g := range groups {
			courseGroups[g.CourseID] = append(courseGroups[g.CourseID], g.GroupName)
		}

		// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		var msgText string
		for _, course := range courses {
			groupsForCourse := courseGroups[course.ID]
			if len(groupsForCourse) == 0 {
				msgText += fmt.Sprintf("üìò %s: –Ω–µ—Ç –≥—Ä—É–ø–ø\n", course.Name)
			} else {
				msgText += fmt.Sprintf("üìò %s: %s\n", course.Name, strings.Join(groupsForCourse, ", "))
			}
		}
		if msgText == "" {
			msgText = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		msg := tgbotapi.NewMessage(chatID, msgText)
		sendAndTrackMessage(bot, msg)
		return

	}

	// –ï—Å–ª–∏ callback –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é, –ø–µ—Ä–µ–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–ª–æ–≥–∏–Ω–∞
	RegistrationProcessCallback(callback, bot)
}
