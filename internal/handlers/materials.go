package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// GetMaterialsByTeacher –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.
func GetMaterialsByTeacher(teacherRegCode string) ([]models.Material, error) {
	rows, err := db.DB.Query(`
		SELECT id, course_id, group_name, teacher_reg_code, title, file_url, description
		FROM materials
		WHERE teacher_reg_code = ?
	`, teacherRegCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var materials []models.Material
	for rows.Next() {
		var m models.Material
		if err := rows.Scan(&m.ID, &m.CourseID, &m.GroupName, &m.TeacherRegCode, &m.Title, &m.FileURL, &m.Description); err != nil {
			return nil, err
		}
		materials = append(materials, m)
	}
	return materials, rows.Err()
}

// GetMaterialsByGroup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã (—É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ, –Ω–æ –≤–∫–ª—é—á–∏–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã).
func GetMaterialsByGroup(group string) ([]models.Material, error) {
	rows, err := db.DB.Query(`
		SELECT id, course_id, group_name, teacher_reg_code, title, file_url, description
		FROM materials
		WHERE group_name = ?
	`, group)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var materials []models.Material
	for rows.Next() {
		var m models.Material
		if err := rows.Scan(&m.ID, &m.CourseID, &m.GroupName, &m.TeacherRegCode, &m.Title, &m.FileURL, &m.Description); err != nil {
			return nil, err
		}
		materials = append(materials, m)
	}
	return materials, rows.Err()
}

// FormatMaterials —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
func FormatMaterials(materials []models.Material, mode string, user *models.User) (string, error) {
	if len(materials) == 0 {
		return "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö
	courseMap := make(map[int64]string) // courseID -> courseName
	courses, err := db.DB.Query(`SELECT id, name FROM courses`)
	if err != nil {
		return "", err
	}
	defer courses.Close()
	for courses.Next() {
		var id int64
		var name string
		if err := courses.Scan(&id, &name); err != nil {
			return "", err
		}
		courseMap[id] = name
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	msgText := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
	for _, m := range materials {
		courseName := courseMap[m.CourseID]
		msgText += fmt.Sprintf("üìò %s:\n", courseName)
		msgText += fmt.Sprintf("  ‚Ä¢ %s\n", m.Title)
		if m.Description != "" {
			msgText += fmt.Sprintf("    –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", m.Description)
		}
		if m.FileURL != "" {
			msgText += fmt.Sprintf("    –°—Å—ã–ª–∫–∞: %s\n", m.FileURL)
		}
		if mode == "teacher" {
			msgText += fmt.Sprintf("    –ì—Ä—É–ø–ø–∞: %s\n", m.GroupName)
		}
		msgText += "\n"
	}

	return msgText, nil
}

// ShowMaterials –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
func ShowMaterials(chatID int64, bot *tgbotapi.BotAPI, user *models.User) error {
	var materials []models.Material
	var err error
	var mode string

	if user.Role == "teacher" {
		mode = "teacher"
		materials, err = GetMaterialsByTeacher(user.RegistrationCode)
	} else if user.Role == "student" {
		mode = "student"
		materials, err = GetMaterialsByGroup(user.Group)
	} else {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
		return sendAndTrackMessage(bot, msg)
	}

	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
		return sendAndTrackMessage(bot, msg)
	}

	msgText, err := FormatMaterials(materials, mode, user)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
		return sendAndTrackMessage(bot, msg)
	}

	msg := tgbotapi.NewMessage(chatID, msgText)
	return sendAndTrackMessage(bot, msg)
}
