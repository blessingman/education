package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"math"
	"strconv"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Pagination state storage for materials
var (
	materialPageState    = make(map[int64]int)    // chatID -> current page
	materialFilterState  = make(map[int64]string) // chatID -> current filter (course name)
	materialItemsPerPage = 5                      // Number of materials per page
	materialStateMutex   sync.RWMutex
)

// GetMaterialsByTeacher –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
func GetMaterialsByTeacher(teacherRegCode string, limit, offset int) ([]models.Material, error) {
	query := `
		SELECT m.id, m.course_id, m.group_name, m.teacher_reg_code, m.title, m.file_url, m.description
		FROM materials m
		WHERE m.teacher_reg_code = ?
		ORDER BY m.id DESC
		LIMIT ? OFFSET ?
	`
	rows, err := db.DB.Query(query, teacherRegCode, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var materials []models.Material
	for rows.Next() {
		var m models.Material
		if err := rows.Scan(&m.ID, &m.CourseID, &m.GroupName, &m.TeacherRegCode, &m.Title, &m.FileURL, &m.Description); err != nil {
			return nil, err
		}
		materials = append(materials, m)
	}
	return materials, rows.Err()
}

// GetMaterialsByGroup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
func GetMaterialsByGroup(group string, limit, offset int) ([]models.Material, error) {
	query := `
		SELECT m.id, m.course_id, m.group_name, m.teacher_reg_code, m.title, m.file_url, m.description
		FROM materials m
		WHERE m.group_name = ?
		ORDER BY m.id DESC
		LIMIT ? OFFSET ?
	`
	rows, err := db.DB.Query(query, group, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var materials []models.Material
	for rows.Next() {
		var m models.Material
		if err := rows.Scan(&m.ID, &m.CourseID, &m.GroupName, &m.TeacherRegCode, &m.Title, &m.FileURL, &m.Description); err != nil {
			return nil, err
		}
		materials = append(materials, m)
	}
	return materials, rows.Err()
}

// GetMaterialsByTeacherAndCourse –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞.
func GetMaterialsByTeacherAndCourse(teacherRegCode string, courseID int64, limit, offset int) ([]models.Material, error) {
	query := `
		SELECT m.id, m.course_id, m.group_name, m.teacher_reg_code, m.title, m.file_url, m.description
		FROM materials m
		WHERE m.teacher_reg_code = ? AND m.course_id = ?
		ORDER BY m.id DESC
		LIMIT ? OFFSET ?
	`
	rows, err := db.DB.Query(query, teacherRegCode, courseID, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var materials []models.Material
	for rows.Next() {
		var m models.Material
		if err := rows.Scan(&m.ID, &m.CourseID, &m.GroupName, &m.TeacherRegCode, &m.Title, &m.FileURL, &m.Description); err != nil {
			return nil, err
		}
		materials = append(materials, m)
	}
	return materials, rows.Err()
}

// GetMaterialsByGroupAndCourse –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –∫—É—Ä—Å–∞.
func GetMaterialsByGroupAndCourse(group string, courseID int64, limit, offset int) ([]models.Material, error) {
	query := `
		SELECT m.id, m.course_id, m.group_name, m.teacher_reg_code, m.title, m.file_url, m.description
		FROM materials m
		WHERE m.group_name = ? AND m.course_id = ?
		ORDER BY m.id DESC
		LIMIT ? OFFSET ?
	`
	rows, err := db.DB.Query(query, group, courseID, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var materials []models.Material
	for rows.Next() {
		var m models.Material
		if err := rows.Scan(&m.ID, &m.CourseID, &m.GroupName, &m.TeacherRegCode, &m.Title, &m.FileURL, &m.Description); err != nil {
			return nil, err
		}
		materials = append(materials, m)
	}
	return materials, rows.Err()
}

// CountMaterialsByTeacher –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.
func CountMaterialsByTeacher(teacherRegCode string) (int, error) {
	var count int
	err := db.DB.QueryRow("SELECT COUNT(*) FROM materials WHERE teacher_reg_code = ?", teacherRegCode).Scan(&count)
	return count, err
}

// CountMaterialsByGroup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã.
func CountMaterialsByGroup(group string) (int, error) {
	var count int
	err := db.DB.QueryRow("SELECT COUNT(*) FROM materials WHERE group_name = ?", group).Scan(&count)
	return count, err
}

// CountMaterialsByTeacherAndCourse –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å–∞.
func CountMaterialsByTeacherAndCourse(teacherRegCode string, courseID int64) (int, error) {
	var count int
	err := db.DB.QueryRow("SELECT COUNT(*) FROM materials WHERE teacher_reg_code = ? AND course_id = ?",
		teacherRegCode, courseID).Scan(&count)
	return count, err
}

// CountMaterialsByGroupAndCourse –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã –∏ –∫—É—Ä—Å–∞.
func CountMaterialsByGroupAndCourse(group string, courseID int64) (int, error) {
	var count int
	err := db.DB.QueryRow("SELECT COUNT(*) FROM materials WHERE group_name = ? AND course_id = ?",
		group, courseID).Scan(&count)
	return count, err
}

// FormatMaterials —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
func FormatMaterials(materials []models.Material, mode string, currentPage, totalPages int, user *models.User) (string, error) {
	if len(materials) == 0 {
		return "üìö *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*.\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.", nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö
	courseMap := make(map[int64]string) // courseID -> courseName
	courses, err := db.DB.Query(`SELECT id, name FROM courses`)
	if err != nil {
		return "", err
	}
	defer courses.Close()
	for courses.Next() {
		var id int64
		var name string
		if err := courses.Scan(&id, &name); err != nil {
			return "", err
		}
		courseMap[id] = name
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞)
	teacherMap := make(map[string]string) // reg_code -> name
	if mode == "student" {
		teachers, err := db.DB.Query(`SELECT registration_code, name FROM users WHERE role = 'teacher'`)
		if err != nil {
			return "", err
		}
		defer teachers.Close()
		for teachers.Next() {
			var regCode, name string
			if err := teachers.Scan(&regCode, &name); err != nil {
				return "", err
			}
			teacherMap[regCode] = name
		}
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫—É—Ä—Å–∞–º –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	courseGroups := make(map[int64][]models.Material)
	for _, m := range materials {
		courseGroups[m.CourseID] = append(courseGroups[m.CourseID], m)
	}

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
	msgText := "üìö *–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã*\n\n"

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ –≤—ã–≤–æ–¥–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
	for courseID, courseMaterials := range courseGroups {
		courseName := courseMap[courseID]
		if courseName == "" {
			courseName = fmt.Sprintf("–ö—É—Ä—Å #%d", courseID)
		}

		msgText += fmt.Sprintf("üìò *%s*:\n", courseName)

		for _, m := range courseMaterials {
			msgText += fmt.Sprintf("  ‚Ä¢ *%s*\n", m.Title)

			if m.Description != "" {
				msgText += fmt.Sprintf("    üìù %s\n", m.Description)
			}

			if m.FileURL != "" {
				msgText += fmt.Sprintf("    üîó [–°–∫–∞—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª](%s)\n", m.FileURL)
			}

			if mode == "teacher" {
				msgText += fmt.Sprintf("    üë• –ì—Ä—É–ø–ø–∞: %s\n", m.GroupName)
			} else {
				teacherName := teacherMap[m.TeacherRegCode]
				if teacherName == "" {
					teacherName = m.TeacherRegCode
				}
				msgText += fmt.Sprintf("    üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n", teacherName)
			}

			msgText += "\n"
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	if totalPages > 1 {
		msgText += fmt.Sprintf("–°—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d\n", currentPage, totalPages)
	}

	return msgText, nil
}

// BuildMaterialsPaginationKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
func BuildMaterialsPaginationKeyboard(currentPage, totalPages int, filter string) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
	if totalPages > 1 {
		var navButtons []tgbotapi.InlineKeyboardButton

		// –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
		if currentPage > 1 {
			navButtons = append(navButtons,
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("mat_page_%d", currentPage-1)))
		}

		// –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
		if currentPage < totalPages {
			navButtons = append(navButtons,
				tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", fmt.Sprintf("mat_page_%d", currentPage+1)))
		}

		if len(navButtons) > 0 {
			rows = append(rows, navButtons)
		}
	}

	// –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
	filterButtons := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîç –§–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä—Å—É", "mat_filter"),
	}

	// –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞
	if filter != "" {
		filterButtons = append(filterButtons,
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", "mat_filter_reset"))
	}

	rows = append(rows, filterButtons)

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main"),
	})

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// ShowMaterials –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
func ShowMaterials(chatID int64, bot *tgbotapi.BotAPI, user *models.User) error {
	if user == nil {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
		return sendAndTrackMessage(bot, msg)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Ñ–∏–ª—å—Ç—Ä
	materialStateMutex.RLock()
	currentPage := materialPageState[chatID]
	filter := materialFilterState[chatID]
	materialStateMutex.RUnlock()

	if currentPage == 0 {
		currentPage = 1
		materialStateMutex.Lock()
		materialPageState[chatID] = currentPage
		materialStateMutex.Unlock()
	}

	// –í—ã—á–∏—Å–ª—è–µ–º offset –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	offset := (currentPage - 1) * materialItemsPerPage

	var materials []models.Material
	var totalCount int
	var err error
	var mode string

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç)
	if user.Role == "teacher" {
		mode = "teacher"

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä—Å—É
		if filter != "" {
			courseID, err := strconv.ParseInt(filter, 10, 64)
			if err == nil {
				materials, err = GetMaterialsByTeacherAndCourse(user.RegistrationCode, courseID, materialItemsPerPage, offset)
				if err == nil {
					totalCount, err = CountMaterialsByTeacherAndCourse(user.RegistrationCode, courseID)
				}
			}
		} else {
			materials, err = GetMaterialsByTeacher(user.RegistrationCode, materialItemsPerPage, offset)
			if err == nil {
				totalCount, err = CountMaterialsByTeacher(user.RegistrationCode)
			}
		}
	} else {
		mode = "student"

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä—Å—É
		if filter != "" {
			courseID, err := strconv.ParseInt(filter, 10, 64)
			if err == nil {
				materials, err = GetMaterialsByGroupAndCourse(user.Group, courseID, materialItemsPerPage, offset)
				if err == nil {
					totalCount, err = CountMaterialsByGroupAndCourse(user.Group, courseID)
				}
			}
		} else {
			materials, err = GetMaterialsByGroup(user.Group, materialItemsPerPage, offset)
			if err == nil {
				totalCount, err = CountMaterialsByGroup(user.Group)
			}
		}
	}

	if err != nil {
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: %s", err.Error()))
		return sendAndTrackMessage(bot, msg)
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
	totalPages := int(math.Ceil(float64(totalCount) / float64(materialItemsPerPage)))
	if totalPages == 0 {
		totalPages = 1
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
	if currentPage > totalPages {
		currentPage = totalPages
		materialStateMutex.Lock()
		materialPageState[chatID] = currentPage
		materialStateMutex.Unlock()

		// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–Ω–æ–≤–æ
		offset = (currentPage - 1) * materialItemsPerPage
		if mode == "teacher" {
			if filter != "" {
				courseID, _ := strconv.ParseInt(filter, 10, 64)
				materials, _ = GetMaterialsByTeacherAndCourse(user.RegistrationCode, courseID, materialItemsPerPage, offset)
			} else {
				materials, _ = GetMaterialsByTeacher(user.RegistrationCode, materialItemsPerPage, offset)
			}
		} else {
			if filter != "" {
				courseID, _ := strconv.ParseInt(filter, 10, 64)
				materials, _ = GetMaterialsByGroupAndCourse(user.Group, courseID, materialItemsPerPage, offset)
			} else {
				materials, _ = GetMaterialsByGroup(user.Group, materialItemsPerPage, offset)
			}
		}
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	msgText, err := FormatMaterials(materials, mode, currentPage, totalPages, user)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
		return sendAndTrackMessage(bot, msg)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := BuildMaterialsPaginationKeyboard(currentPage, totalPages, filter)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	msg.DisableWebPagePreview = false // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

	return sendAndTrackMessage(bot, msg)
}

// ShowMaterialFilters –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
func ShowMaterialFilters(chatID int64, bot *tgbotapi.BotAPI, user *models.User) error {
	if user == nil {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
		return sendAndTrackMessage(bot, msg)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
	var courses []models.Course
	var err error

	if user.Role == "teacher" {
		// –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –µ–≥–æ –∫—É—Ä—Å—ã
		courses, err = GetCoursesByTeacherRegCode(user.RegistrationCode)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: %s", err.Error()))
			return sendAndTrackMessage(bot, msg)
		}
	} else {
		// –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ - –∫—É—Ä—Å—ã –µ–≥–æ –≥—Ä—É–ø–ø—ã
		courses, err = GetCoursesForGroup(user.Group)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: %s", err.Error()))
			return sendAndTrackMessage(bot, msg)
		}
	}

	if len(courses) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
		return sendAndTrackMessage(bot, msg)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, course := range courses {
		rows = append(rows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				course.Name, fmt.Sprintf("mat_filter_set_%d", course.ID)),
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "mat_cancel"),
	})

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫—É—Ä—Å–∞
	msg := tgbotapi.NewMessage(chatID, "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
	msg.ReplyMarkup = keyboard

	return sendAndTrackMessage(bot, msg)
}

// GetCoursesForGroup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã.
func GetCoursesForGroup(group string) ([]models.Course, error) {
	query := `
		SELECT DISTINCT c.id, c.name
		FROM courses c
		JOIN teacher_course_groups tcg ON c.id = tcg.course_id
		WHERE tcg.group_name = ?
		ORDER BY c.name
	`
	rows, err := db.DB.Query(query, group)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var courses []models.Course
	for rows.Next() {
		var course models.Course
		if err := rows.Scan(&course.ID, &course.Name); err != nil {
			return nil, err
		}
		courses = append(courses, course)
	}
	return courses, nil
}

// ProcessMaterialsCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.
func ProcessMaterialsCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI, user *models.User) bool {
	data := callback.Data
	chatID := callback.Message.Chat.ID

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
	if strings.HasPrefix(data, "mat_page_") {
		pageStr := strings.TrimPrefix(data, "mat_page_")
		page, err := strconv.Atoi(pageStr)
		if err != nil {
			bot.Request(tgbotapi.NewCallback(callback.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"))
			return true
		}

		materialStateMutex.Lock()
		materialPageState[chatID] = page
		materialStateMutex.Unlock()

		bot.Request(tgbotapi.NewCallback(callback.ID, fmt.Sprintf("üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ %d", page)))
		ShowMaterials(chatID, bot, user)
		return true
	}

	// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
	if data == "mat_filter" {
		bot.Request(tgbotapi.NewCallback(callback.ID, "üîç –í—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞"))
		ShowMaterialFilters(chatID, bot, user)
		return true
	}

	// –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
	if data == "mat_filter_reset" {
		materialStateMutex.Lock()
		delete(materialFilterState, chatID)
		materialPageState[chatID] = 1 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é
		materialStateMutex.Unlock()

		bot.Request(tgbotapi.NewCallback(callback.ID, "üîÑ –§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω"))
		ShowMaterials(chatID, bot, user)
		return true
	}

	// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä—Å—É
	if strings.HasPrefix(data, "mat_filter_set_") {
		courseIDStr := strings.TrimPrefix(data, "mat_filter_set_")

		materialStateMutex.Lock()
		materialFilterState[chatID] = courseIDStr
		materialPageState[chatID] = 1 // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
		materialStateMutex.Unlock()

		bot.Request(tgbotapi.NewCallback(callback.ID, "üîç –§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
		ShowMaterials(chatID, bot, user)
		return true
	}

	// –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
	if data == "mat_cancel" {
		bot.Request(tgbotapi.NewCallback(callback.ID, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"))
		ShowMaterials(chatID, bot, user)
		return true
	}

	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
	if data == "menu_main" {
		bot.Request(tgbotapi.NewCallback(callback.ID, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
		sendMainMenu(chatID, bot, user)
		return true
	}

	// –ù–µ –Ω–∞—à callback
	return false
}
