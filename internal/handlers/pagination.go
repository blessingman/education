package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"sort"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

/*
func getCourseAndTeacherMaps() (map[int64]string, map[string]string, error) {
	courseMap := make(map[int64]string)   // course_id -> course_name
	teacherMap := make(map[string]string) // registration_code -> teacher_name

	// –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è courseMap –∏–∑ —Ç–∞–±–ª–∏—Ü—ã courses
	rowsCourses, err := db.DB.Query("SELECT id, name FROM courses")
	if err != nil {
		return nil, nil, err
	}
	defer rowsCourses.Close()

	for rowsCourses.Next() {
		var id int64
		var name string
		if err := rowsCourses.Scan(&id, &name); err != nil {
			return nil, nil, err
		}
		courseMap[id] = name
	}

	// –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è teacherMap –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, –≥–¥–µ role='teacher'
	rowsTeachers, err := db.DB.Query("SELECT registration_code, name FROM users WHERE role = 'teacher'")
	if err != nil {
		return nil, nil, err
	}
	defer rowsTeachers.Close()

	for rowsTeachers.Next() {
		var regCode, name string
		if err := rowsTeachers.Scan(&regCode, &name); err != nil {
			return nil, nil, err
		}
		teacherMap[regCode] = name
	}

	return courseMap, teacherMap, nil
}
*/

// CountSchedulesByGroup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.
func CountSchedulesByGroup(group string) (int, error) {
	query := `SELECT COUNT(*) FROM schedules WHERE group_name = ?`
	var count int
	err := db.DB.QueryRow(query, group).Scan(&count)
	return count, err
}

// CountSchedulesByTeacher –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.
func CountSchedulesByTeacher(teacherRegCode string) (int, error) {
	query := `SELECT COUNT(*) FROM schedules WHERE teacher_reg_code = ?`
	var count int
	err := db.DB.QueryRow(query, teacherRegCode).Scan(&count)
	return count, err
}

func BuildWeekNavigationKeyboard(weekStart time.Time) tgbotapi.InlineKeyboardMarkup {
	// –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
	prevWeek := weekStart.AddDate(0, 0, -7)
	nextWeek := weekStart.AddDate(0, 0, 7)

	// –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
	navRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", fmt.Sprintf("week_prev_%s", prevWeek.Format("2006-01-02"))),
		tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚ñ∂Ô∏è", fmt.Sprintf("week_next_%s", nextWeek.Format("2006-01-02"))),
	)

	// –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
	var dayRow []tgbotapi.InlineKeyboardButton
	dayNames := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
	for i := 0; i < 7; i++ {
		day := weekStart.AddDate(0, 0, i)
		dayRow = append(dayRow, tgbotapi.NewInlineKeyboardButtonData(dayNames[i], fmt.Sprintf("day_%s", day.Format("2006-01-02"))))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(navRow, dayRow)
	return keyboard
}

func GetScheduleByGroupCachedPaginated(group string, limit, offset int) ([]models.Schedule, int, error) {
	// –ö–ª—é—á –¥–ª—è –∫–µ—à–∞ ‚Äì –Ω–∞–ø—Ä–∏–º–µ—Ä, –≥—Ä—É–ø–ø–∞
	key := group

	// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
	cacheEntry, found := GetCachedSchedule(key)
	if found {
		totalRecords := len(cacheEntry.Schedules)
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—É—é –ø–æ—Ä—Ü–∏—é (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
		end := offset + limit
		if end > totalRecords {
			end = totalRecords
		}
		if offset > totalRecords {
			return []models.Schedule{}, totalRecords, nil
		}
		return cacheEntry.Schedules[offset:end], totalRecords, nil
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ
	schedules, err := GetScheduleByGroup(group)
	if err != nil {
		return nil, 0, err
	}
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
	SetCachedSchedule(key, schedules)
	totalRecords := len(schedules)
	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
	end := offset + limit
	if end > totalRecords {
		end = totalRecords
	}
	if offset > totalRecords {
		return []models.Schedule{}, totalRecords, nil
	}
	return schedules[offset:end], totalRecords, nil
}

// GetScheduleByTeacherCachedPaginated –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
// teacherRegCode ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, limit ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, offset ‚Äì —Å–º–µ—â–µ–Ω–∏–µ.
func GetScheduleByTeacherCachedPaginated(teacherRegCode string, limit, offset int) ([]models.Schedule, int, error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –¥–ª—è –∫–µ—à–∞.
	key := teacherRegCode

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞.
	cacheEntry, found := GetCachedSchedule(key)
	if found {
		totalRecords := len(cacheEntry.Schedules)
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é.
		end := offset + limit
		if end > totalRecords {
			end = totalRecords
		}
		if offset > totalRecords {
			return []models.Schedule{}, totalRecords, nil
		}
		return cacheEntry.Schedules[offset:end], totalRecords, nil
	}

	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ.
	schedules, err := GetScheduleByTeacher(teacherRegCode)
	if err != nil {
		return nil, 0, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à.
	SetCachedSchedule(key, schedules)
	totalRecords := len(schedules)
	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é.
	end := offset + limit
	if end > totalRecords {
		end = totalRecords
	}
	if offset > totalRecords {
		return []models.Schedule{}, totalRecords, nil
	}
	return schedules[offset:end], totalRecords, nil
}

func FormatSchedulesGroupedByDay(schedules []models.Schedule, currentPage, totalPages int, mode string, user *models.User) string {
	if len(schedules) == 0 {
		return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
	}

	// –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
	// msgText := fmt.Sprintf("<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d)</b>\n\n", currentPage, totalPages)
	// –î–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:
	msgText := "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å</b>\n\n"

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (–±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏)
	type dayKey string // —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD
	grouped := make(map[dayKey][]models.Schedule)
	for _, s := range schedules {
		dateOnly := s.ScheduleTime.Format("2006-01-02")
		grouped[dayKey(dateOnly)] = append(grouped[dayKey(dateOnly)], s)
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
	var sortedDates []string
	for k := range grouped {
		sortedDates = append(sortedDates, string(k))
	}
	sort.Strings(sortedDates)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø–æ –∫—É—Ä—Å–∞–º –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
	courseMap := make(map[int64]string)
	teacherMap := make(map[string]string)
	{
		rowsCourses, err := db.DB.Query("SELECT id, name FROM courses")
		if err == nil {
			defer rowsCourses.Close()
			for rowsCourses.Next() {
				var id int64
				var name string
				_ = rowsCourses.Scan(&id, &name)
				courseMap[id] = name
			}
		}
		rowsTeachers, err := db.DB.Query("SELECT registration_code, name FROM users WHERE role = 'teacher'")
		if err == nil {
			defer rowsTeachers.Close()
			for rowsTeachers.Next() {
				var regCode, name string
				_ = rowsTeachers.Scan(&regCode, &name)
				teacherMap[regCode] = name
			}
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
	for _, dateStr := range sortedDates {
		t, err := time.Parse("2006-01-02", dateStr)
		if err != nil {
			continue
		}
		// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è —Å —ç–º–æ–¥–∑–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏
		dayHeader := fmt.Sprintf("üìÖ <b>%s (%s)</b>\n", t.Format("02.01.2006"), weekdayName(t.Weekday()))
		msgText += dayHeader

		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		for _, s := range grouped[dayKey(dateStr)] {
			timeStr := s.ScheduleTime.Format("15:04")
			courseName := courseMap[s.CourseID]
			teacherName := teacherMap[s.TeacherRegCode]

			if mode == "teacher" {
				// –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ‚Äì –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä—É–ø–ø—É
				msgText += fmt.Sprintf("   ‚Ä¢ <b>%s</b> ‚Äî %s\n     <i>–ì—Ä—É–ø–ø–∞:</i> %s, <i>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</i> %s, <i>–¢–∏–ø:</i> %s, <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i> %d –º–∏–Ω.\n",
					timeStr, courseName, s.GroupName, s.Auditory, s.LessonType, s.Duration)
			} else {
				// –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ‚Äì –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
				msgText += fmt.Sprintf("   ‚Ä¢ <b>%s</b> ‚Äî %s\n     <i>–ü—Ä–µ–ø.:</i> %s, <i>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</i> %s, <i>–¢–∏–ø:</i> %s, <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i> %d –º–∏–Ω.\n",
					timeStr, courseName, teacherName, s.Auditory, s.LessonType, s.Duration)
			}
		}
		msgText += "\n" // –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –¥–Ω—è–º–∏
	}

	// –ü–æ–¥–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è
	msgText += "<i>–ù–∞–¥–µ–µ–º—Å—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å!</i>"
	return msgText
}
