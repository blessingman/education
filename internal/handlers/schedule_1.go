package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ShowScheduleWeek –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é.
// weekStart ‚Äì –¥–∞—Ç–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å.
func ShowScheduleWeek(chatID int64, bot *tgbotapi.BotAPI, user *models.User, weekStart time.Time) error {
	weekEnd := weekStart.AddDate(0, 0, 6) // –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

	var schedules []models.Schedule
	var err error
	if user.Role == "teacher" {
		schedules, err = GetSchedulesForTeacherByDateRange(user.RegistrationCode, weekStart, weekEnd)
	} else {
		schedules, err = GetSchedulesForGroupByDateRange(user.Group, weekStart, weekEnd)
	}
	if err != nil {
		return err
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º)
	text := FormatSchedulesByWeek(schedules, weekStart, weekEnd, user.Role, user)
	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º –∏ –¥–Ω—è–º
	keyboard := BuildWeekNavigationKeyboard(weekStart)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	return sendAndTrackMessage(bot, msg)
}

// ShowScheduleDay –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å.
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç chatID, bot, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å (time.Time).
func ShowScheduleDay(chatID int64, bot *tgbotapi.BotAPI, user *models.User, day time.Time) error {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è
	dayStr := day.Format("2006-01-02")
	dayStart, _ := time.Parse("2006-01-02", dayStr)
	dayEnd := dayStart.AddDate(0, 0, 1).Add(-time.Second) // –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è

	var schedules []models.Schedule
	var err error
	if user.Role == "teacher" {
		schedules, err = GetSchedulesForTeacherByDateRange(user.RegistrationCode, dayStart, dayEnd)
	} else {
		schedules, err = GetSchedulesForGroupByDateRange(user.Group, dayStart, dayEnd)
	}
	if err != nil {
		return err
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è.
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º ‚Äì –ø—Ä–∏ –æ–¥–Ω–æ–º –¥–Ω–µ –æ–Ω–∞ –≤–µ—Ä–Ω–µ—Ç –æ–¥–∏–Ω –±–ª–æ–∫.
	text := FormatSchedulesGroupedByDay(schedules, 1, 1, user.Role, user)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª–µ".
	// –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞).
	offset := int(dayStart.Weekday())
	// –ï—Å–ª–∏ Sunday (0) ‚Äì –ø—Ä–∏–≤–æ–¥–∏–º –∫ 7, —á—Ç–æ–±—ã –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –±—ã–ª –ø–µ—Ä–≤—ã–º
	if offset == 0 {
		offset = 7
	}
	weekStart := dayStart.AddDate(0, 0, -(offset - 1))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª–µ", fmt.Sprintf("week_prev_%s", weekStart.Format("2006-01-02"))),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	return sendAndTrackMessage(bot, msg)
}

func GetSchedulesForTeacherByDateRange(teacherRegCode string, start, end time.Time) ([]models.Schedule, error) {
	query := `
       SELECT id, course_id, group_name, teacher_reg_code, schedule_time, description
       FROM schedules
       WHERE teacher_reg_code = ? AND date(schedule_time) BETWEEN ? AND ?
       ORDER BY schedule_time
    `
	rows, err := db.DB.Query(query, teacherRegCode, start.Format("2006-01-02"), end.Format("2006-01-02"))
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(&s.ID, &s.CourseID, &s.GroupName, &s.TeacherRegCode, &scheduleTimeStr, &s.Description); err != nil {
			return nil, err
		}
		s.ScheduleTime, _ = time.Parse(time.RFC3339, scheduleTimeStr)
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

func GetSchedulesForGroupByDateRange(group string, start, end time.Time) ([]models.Schedule, error) {
	query := `
       SELECT id, course_id, group_name, teacher_reg_code, schedule_time, description
       FROM schedules
       WHERE group_name = ? AND date(schedule_time) BETWEEN ? AND ?
       ORDER BY schedule_time
    `
	rows, err := db.DB.Query(query, group, start.Format("2006-01-02"), end.Format("2006-01-02"))
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(&s.ID, &s.CourseID, &s.GroupName, &s.TeacherRegCode, &scheduleTimeStr, &s.Description); err != nil {
			return nil, err
		}
		s.ScheduleTime, _ = time.Parse(time.RFC3339, scheduleTimeStr)
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

func FormatSchedulesByWeek(schedules []models.Schedule, weekStart, weekEnd time.Time, mode string, user *models.User) string {
	msgText := fmt.Sprintf("<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é (%s - %s)</b>\n\n",
		weekStart.Format("02.01.2006"), weekEnd.Format("02.01.2006"))

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∞—Ç–∞–º
	type dayKey string
	grouped := make(map[dayKey][]models.Schedule)
	for _, s := range schedules {
		dateOnly := s.ScheduleTime.Format("2006-01-02")
		grouped[dayKey(dateOnly)] = append(grouped[dayKey(dateOnly)], s)
	}

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –æ—Ç weekStart –¥–æ weekEnd
	for d := 0; d < 7; d++ {
		day := weekStart.AddDate(0, 0, d)
		dayStr := day.Format("2006-01-02")
		dayName := weekdayName(day.Weekday())
		msgText += fmt.Sprintf("üìÖ <b>%s (%s)</b>\n", day.Format("02.01.2006"), dayName)
		if entries, ok := grouped[dayKey(dayStr)]; ok {
			for _, s := range entries {
				timeStr := s.ScheduleTime.Format("15:04")
				// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ courseMap –∏ teacherMap, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º
				// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å:
				if mode == "teacher" {
					msgText += fmt.Sprintf("   ‚Ä¢ <i>%s</i>: %s (–≥—Ä—É–ø–ø–∞: %s)\n", timeStr, s.Description, s.GroupName)
				} else {
					msgText += fmt.Sprintf("   ‚Ä¢ <i>%s</i>: %s (–ü—Ä–µ–ø.: %s)\n", timeStr, s.Description, s.TeacherRegCode)
				}
			}
		} else {
			msgText += "   –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π.\n"
		}
		msgText += "\n"
	}
	msgText += "<i>–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –Ω–µ–¥–µ–ª—é —Å —É–º–æ–º!</i>"
	return msgText
}
