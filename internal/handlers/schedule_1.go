package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"sort"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ShowScheduleWeek –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é.
// weekStart ‚Äì –¥–∞—Ç–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å.
func ShowScheduleWeek(chatID int64, bot *tgbotapi.BotAPI, user *models.User, weekStart time.Time) error {
	weekEnd := weekStart.AddDate(0, 0, 6)

	var schedules []models.Schedule
	var err error
	if user.Role == "teacher" {
		schedules, err = GetSchedulesForTeacherByDateRange(user.RegistrationCode, weekStart, weekEnd)
	} else {
		schedules, err = GetSchedulesForGroupByDateRange(user.Group, weekStart, weekEnd)
	}
	if err != nil {
		return err
	}

	text := FormatSchedulesByWeek(schedules, weekStart, weekEnd, user.Role, user)
	// –í–º–µ—Å—Ç–æ BuildWeekNavigationKeyboard(...) –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
	keyboard := BuildWeekNavigationKeyboardFiltered(weekStart, schedules)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	return sendAndTrackMessage(bot, msg)
}

// ShowScheduleDay –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å.
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç chatID, bot, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å (time.Time).
func ShowScheduleDay(chatID int64, bot *tgbotapi.BotAPI, user *models.User, day time.Time) error {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è
	dayStr := day.Format("2006-01-02")
	dayStart, _ := time.Parse("2006-01-02", dayStr)
	dayEnd := dayStart.AddDate(0, 0, 1).Add(-time.Second) // –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è

	var schedules []models.Schedule
	var err error
	if user.Role == "teacher" {
		schedules, err = GetSchedulesForTeacherByDateRange(user.RegistrationCode, dayStart, dayEnd)
	} else {
		schedules, err = GetSchedulesForGroupByDateRange(user.Group, dayStart, dayEnd)
	}
	if err != nil {
		return err
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è.
	// –§—É–Ω–∫—Ü–∏—è FormatSchedulesGroupedByDay –≤–µ—Ä–Ω–µ—Ç –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.
	text := FormatSchedulesGroupedByDay(schedules, 1, 1, user.Role, user)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:
	// 1. "–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª–µ"
	// 2. "–§–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä—Å—É" ‚Äì –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É
	// 3. (–ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å) "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" ‚Äì –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å

	var keyboardRows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª–µ"
	// –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞)
	offset := int(dayStart.Weekday())
	if offset == 0 {
		offset = 7
	}
	weekStart := dayStart.AddDate(0, 0, -(offset - 1))
	backButton := tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª–µ", fmt.Sprintf("week_prev_%s", weekStart.Format("2006-01-02")))
	keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(backButton))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	return sendAndTrackMessage(bot, msg)
}

func GetSchedulesForTeacherByDateRange(teacherRegCode string, start, end time.Time) ([]models.Schedule, error) {
	query := `
       SELECT
         id, course_id, group_name, teacher_reg_code,
         schedule_time, description, auditory, lesson_type, duration
       FROM schedules
       WHERE teacher_reg_code = ? AND date(schedule_time) BETWEEN ? AND ?
       ORDER BY schedule_time
    `
	rows, err := db.DB.Query(query, teacherRegCode, start.Format("2006-01-02"), end.Format("2006-01-02"))
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration, // <-- –°—á–∏—Ç—ã–≤–∞–µ–º duration
		); err != nil {
			return nil, err
		}
		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

func GetSchedulesForGroupByDateRange(group string, start, end time.Time) ([]models.Schedule, error) {
	query := `
       SELECT
         id, course_id, group_name, teacher_reg_code,
         schedule_time, description, auditory, lesson_type, duration
       FROM schedules
       WHERE group_name = ? AND date(schedule_time) BETWEEN ? AND ?
       ORDER BY schedule_time
    `
	rows, err := db.DB.Query(query, group, start.Format("2006-01-02"), end.Format("2006-01-02"))
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration, // <-- duration
		); err != nil {
			return nil, err
		}
		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

func FormatSchedulesByWeek(schedules []models.Schedule, weekStart, weekEnd time.Time, mode string, user *models.User) string {
	// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	total := len(schedules)
	passed := 0
	now := time.Now()
	for _, s := range schedules {
		if s.ScheduleTime.Before(now) {
			passed++
		}
	}
	progressPercent := 0
	if total > 0 {
		progressPercent = (passed * 100) / total
	}

	msgText := fmt.Sprintf("<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é (%s ‚Äì %s)</b>\n–ü—Ä–æ–≥—Ä–µ—Å—Å: <b>%d%%</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n",
		weekStart.Format("02.01.2006"), weekEnd.Format("02.01.2006"), progressPercent)
	msgText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∞—Ç–∞–º
	type dayKey string
	grouped := make(map[dayKey][]models.Schedule)
	for _, s := range schedules {
		dateOnly := s.ScheduleTime.Format("2006-01-02")
		grouped[dayKey(dateOnly)] = append(grouped[dayKey(dateOnly)], s)
	}

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç
	var sortedDates []string
	for k := range grouped {
		sortedDates = append(sortedDates, string(k))
	}
	sort.Strings(sortedDates)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
	for _, dateStr := range sortedDates {
		t, err := time.Parse("2006-01-02", dateStr)
		if err != nil {
			continue
		}
		dayHeader := fmt.Sprintf("üìÖ <b>%s (%s)</b>\n", t.Format("02.01.2006"), weekdayName(t.Weekday()))
		msgText += dayHeader

		for _, s := range grouped[dayKey(dateStr)] {
			timeStr := s.ScheduleTime.Format("15:04")
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É: –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã –∫—Ä–∞—Å–∏–≤—ã–µ –∏–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
			// –ù–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã, –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Schedule
			if mode == "teacher" {
				msgText += fmt.Sprintf("  ‚è∞ <b>%s</b> ‚Äì %s\n    <i>–ì—Ä—É–ø–ø–∞:</i> %s, <i>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</i> %s, <i>–¢–∏–ø:</i> %s\n",
					timeStr, s.Description, s.GroupName, s.Auditory, s.LessonType)
			} else {
				msgText += fmt.Sprintf("  ‚è∞ <b>%s</b> ‚Äì %s\n    <i>–ü—Ä–µ–ø.:</i> %s, <i>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</i> %s, <i>–¢–∏–ø:</i> %s\n",
					timeStr, s.Description, s.TeacherRegCode, s.Auditory, s.LessonType)
			}
		}
		msgText += "\n"
	}

	msgText += "<i>–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –Ω–µ–¥–µ–ª—é —Å —É–º–æ–º!</i>"
	return msgText
}
