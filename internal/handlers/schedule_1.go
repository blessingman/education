package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"sort"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ShowScheduleWeek –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é.
// weekStart ‚Äì –¥–∞—Ç–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å.
func ShowScheduleWeek(chatID int64, bot *tgbotapi.BotAPI, user *models.User, weekStart time.Time) error {
	weekEnd := weekStart.AddDate(0, 0, 6)

	var schedules []models.Schedule
	var err error
	if user.Role == "teacher" {
		schedules, err = GetSchedulesForTeacherByDateRange(user.RegistrationCode, weekStart, weekEnd)
	} else {
		schedules, err = GetSchedulesForGroupByDateRange(user.Group, weekStart, weekEnd)
	}
	if err != nil {
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
	filter := GetUserFilter(chatID)
	filteredSchedules := ApplyFilters(schedules, filter)

	text := FormatSchedulesByWeek(filteredSchedules, weekStart, weekEnd, user.Role, user)

	// –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if filter.CourseName != "" || filter.LessonType != "" {
		filterInfo := "\n<b>üìå –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
		if filter.CourseName != "" {
			filterInfo += fmt.Sprintf("‚Ä¢ –ö—É—Ä—Å: <b>%s</b>\n", filter.CourseName)
		}
		if filter.LessonType != "" {
			filterInfo += fmt.Sprintf("‚Ä¢ –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>%s</b>\n", filter.LessonType)
		}
		text = text + filterInfo
	}

	// –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	baseRows := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("‚óÑ", fmt.Sprintf("week_prev_%s", weekStart.AddDate(0, 0, -7).Format("2006-01-02"))),
			tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è", "week_today"),
			tgbotapi.NewInlineKeyboardButtonData("‚ñ∫", fmt.Sprintf("week_next_%s", weekStart.AddDate(0, 0, 7).Format("2006-01-02"))),
		},
		{}, // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
	filterRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "filter_menu"),
	)
	baseRows = append(baseRows, filterRow)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(baseRows...)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ä–µ–∂–∏–º–æ–≤
	modeKeyboard := BuildModeSwitchKeyboard("mode_week")
	if modeKeyboard.InlineKeyboard != nil {
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, modeKeyboard.InlineKeyboard...)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	return sendAndTrackMessage(bot, msg)
}

// –£–î–ê–õ–Ø–ï–ú –¥—É–±–ª–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é ShowEnhancedScheduleDay, –æ–Ω–∞ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ schedule_day.go

func GetSchedulesForTeacherByDateRange(teacherRegCode string, start, end time.Time) ([]models.Schedule, error) {
	query := `
        SELECT
            id, course_id, group_name, teacher_reg_code,
            schedule_time, description, auditory, lesson_type, duration
        FROM schedules
        WHERE teacher_reg_code = ? AND date(schedule_time) BETWEEN ? AND ?
        ORDER BY schedule_time
    `
	rows, err := db.DB.Query(query, teacherRegCode, start.Format("2006-01-02"), end.Format("2006-01-02"))
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration,
		); err != nil {
			return nil, err
		}
		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

func GetSchedulesForGroupByDateRange(group string, start, end time.Time) ([]models.Schedule, error) {
	query := `
       SELECT
         id, course_id, group_name, teacher_reg_code,
         schedule_time, description, auditory, lesson_type, duration
       FROM schedules
       WHERE group_name = ? AND date(schedule_time) BETWEEN ? AND ?
       ORDER BY schedule_time
    `
	rows, err := db.DB.Query(query, group, start.Format("2006-01-02"), end.Format("2006-01-02"))
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration, // <-- duration
		); err != nil {
			return nil, err
		}
		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

func FormatSchedulesByWeek(
	schedules []models.Schedule,
	weekStart, weekEnd time.Time,
	mode string,
	user *models.User,
) string {
	if len(schedules) == 0 {
		return fmt.Sprintf("üìÜ <b>–ù–µ–¥–µ–ª—è %s ‚Äì %s</b>\n\nüîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é</i>",
			weekStart.Format("02.01.2006"), weekEnd.Format("02.01.2006"))
	}

	// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
	grouped := make(map[string][]models.Schedule)
	for _, s := range schedules {
		date := s.ScheduleTime.Format("2006-01-02")
		grouped[date] = append(grouped[date], s)
	}

	var msg strings.Builder
	msg.WriteString(fmt.Sprintf("üìÜ <b>–ù–µ–¥–µ–ª—è %s ‚Äì %s</b>\n\n",
		weekStart.Format("02.01.2006"), weekEnd.Format("02.01.2006")))

	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
	hasEvents := false
	for d := 0; d < 7; d++ {
		day := weekStart.AddDate(0, 0, d)
		dayStr := day.Format("2006-01-02")

		if entries, ok := grouped[dayStr]; ok {
			hasEvents = true

			// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
			msg.WriteString(fmt.Sprintf("üóì <b>%s (%s)</b>\n",
				day.Format("02.01.2006"), weekdayName(day.Weekday())))
			msg.WriteString("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
			sort.Slice(entries, func(i, j int) bool {
				return entries[i].ScheduleTime.Before(entries[j].ScheduleTime)
			})

			for _, s := range entries {
				timeStr := s.ScheduleTime.Format("15:04")
				endTimeStr := s.ScheduleTime.Add(time.Duration(s.Duration) * time.Minute).Format("15:04")

				// –ü–æ–ª–Ω—ã–π –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏
				msg.WriteString(fmt.Sprintf("\n‚è∞ <b>%s - %s</b> (%d –º–∏–Ω.)\n", timeStr, endTimeStr, s.Duration))
				msg.WriteString(fmt.Sprintf("üìö <b>%s</b>\n", s.Description))

				if mode == "teacher" {
					msg.WriteString(fmt.Sprintf("üë• –ì—Ä—É–ø–ø–∞: %s\n", s.GroupName))
				} else {
					msg.WriteString(fmt.Sprintf("üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n", s.TeacherRegCode))
				}

				msg.WriteString(fmt.Sprintf("üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: %s\n", s.Auditory))
				msg.WriteString(fmt.Sprintf("üìù –¢–∏–ø: %s\n", s.LessonType))
			}
			msg.WriteString("\n")
		}
	}

	if !hasEvents {
		msg.WriteString("üîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é</i>\n")
	} else {
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
		msg.WriteString("\n<i>‚ú® –£–¥–∞—á–Ω–æ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏!</i>")
	}

	return msg.String()
}
