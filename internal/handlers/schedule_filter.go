package handlers

import (
	"education/internal/models"
	"fmt"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ScheduleFilter —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
type ScheduleFilter struct {
	CourseID   int64  // ID –∫—É—Ä—Å–∞
	CourseName string // –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
	LessonType string // –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è (–õ–µ–∫—Ü–∏—è, –ü—Ä–∞–∫—Ç–∏–∫–∞, –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è, –°–µ–º–∏–Ω–∞—Ä)
}

var (
	// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userFilters     = make(map[int64]*ScheduleFilter)
	userFilterMutex sync.RWMutex
)

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GetUserFilter(chatID int64) *ScheduleFilter {
	userFilterMutex.RLock()
	defer userFilterMutex.RUnlock()

	filter, exists := userFilters[chatID]
	if !exists {
		return &ScheduleFilter{} // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ
	}
	return filter
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func SetUserFilter(chatID int64, filter *ScheduleFilter) {
	userFilterMutex.Lock()
	defer userFilterMutex.Unlock()

	userFilters[chatID] = filter
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func ResetUserFilters(chatID int64) {
	userFilterMutex.Lock()
	defer userFilterMutex.Unlock()

	userFilters[chatID] = &ScheduleFilter{}
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –≤—ã–±–æ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func ApplyFilters(schedules []models.Schedule, filter *ScheduleFilter) []models.Schedule {
	if filter == nil || (filter.CourseID == 0 && filter.CourseName == "" && filter.LessonType == "") {
		return schedules
	}

	var filtered []models.Schedule
	for _, s := range schedules {
		// –§–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä—Å—É
		if filter.CourseID != 0 && s.CourseID != filter.CourseID {
			continue
		}

		// –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫—É—Ä—Å–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
		if filter.CourseName != "" && !strings.Contains(strings.ToLower(s.Description), strings.ToLower(filter.CourseName)) {
			continue
		}

		// –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
		if filter.LessonType != "" && s.LessonType != filter.LessonType {
			continue
		}

		filtered = append(filtered, s)
	}

	return filtered
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
func ShowFilterMenu(chatID int64, bot *tgbotapi.BotAPI) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –ü–æ –∫—É—Ä—Å—É", "filter_course_menu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ü–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–∏—è", "filter_lesson_type_menu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", "filter_reset_all"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "filter_apply"),
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu_schedule"),
		),
	)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	filter := GetUserFilter(chatID)
	filterInfo := ""
	if filter.CourseName != "" {
		filterInfo += fmt.Sprintf("üìö –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä—Å—É: <b>%s</b>\n", filter.CourseName)
	}
	if filter.LessonType != "" {
		filterInfo += fmt.Sprintf("üìù –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–∏—è: <b>%s</b>\n", filter.LessonType)
	}
	if filterInfo != "" {
		filterInfo += "\n"
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üîç <b>–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n%s–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:", filterInfo))
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	return sendAndTrackMessage(bot, msg)
}

// ShowLessonTypeFilterMenu –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
func ShowLessonTypeFilterMenu(chatID int64, bot *tgbotapi.BotAPI) error {
	// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π
	lessonTypes := []string{"–õ–µ–∫—Ü–∏—è", "–ü—Ä–∞–∫—Ç–∏–∫–∞", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", "–°–µ–º–∏–Ω–∞—Ä"}

	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
	for _, lessonType := range lessonTypes {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(lessonType, "filter_lesson_type_"+lessonType),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–∏–ø–∞", "filter_lesson_type_reset"),
	))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", "filter_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
	msg.ReplyMarkup = keyboard
	return sendAndTrackMessage(bot, msg)
}
