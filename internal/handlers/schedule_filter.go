package handlers

import (
	"education/internal/auth"
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ScheduleFilter —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
type ScheduleFilter struct {
	CourseID   int64  // ID –∫—É—Ä—Å–∞
	CourseName string // –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
	LessonType string // –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è (–õ–µ–∫—Ü–∏—è, –ü—Ä–∞–∫—Ç–∏–∫–∞, –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è, –°–µ–º–∏–Ω–∞—Ä)
}

var (
	// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userFilters     = make(map[int64]*ScheduleFilter)
	userFilterMutex sync.RWMutex
)

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GetUserFilter(chatID int64) *ScheduleFilter {
	userFilterMutex.RLock()
	defer userFilterMutex.RUnlock()

	filter, exists := userFilters[chatID]
	if !exists {
		return &ScheduleFilter{} // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ
	}
	return filter
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func SetUserFilter(chatID int64, filter *ScheduleFilter) {
	userFilterMutex.Lock()
	defer userFilterMutex.Unlock()

	userFilters[chatID] = filter
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func ResetUserFilters(chatID int64) {
	userFilterMutex.Lock()
	defer userFilterMutex.Unlock()

	userFilters[chatID] = &ScheduleFilter{}
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –≤—ã–±–æ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func ApplyFilters(schedules []models.Schedule, filter *ScheduleFilter) []models.Schedule {
	if filter == nil || (filter.CourseID == 0 && filter.CourseName == "" && filter.LessonType == "") {
		return schedules
	}

	var filtered []models.Schedule
	for _, s := range schedules {
		// –§–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä—Å—É
		if filter.CourseID != 0 && s.CourseID != filter.CourseID {
			continue
		}

		// –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫—É—Ä—Å–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
		if filter.CourseName != "" && !strings.Contains(strings.ToLower(s.Description), strings.ToLower(filter.CourseName)) {
			continue
		}

		// –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
		if filter.LessonType != "" && s.LessonType != filter.LessonType {
			continue
		}

		filtered = append(filtered, s)
	}

	return filtered
}

// GetRelevantCoursesForUser –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GetRelevantCoursesForUser(user *models.User) ([]models.Course, error) {
	var query string
	var args []interface{}

	if user.Role == "teacher" {
		query = `
			SELECT DISTINCT c.id, c.name 
			FROM courses c
			JOIN schedules s ON s.course_id = c.id
			WHERE s.teacher_reg_code = ?
			ORDER BY c.name
		`
		args = append(args, user.RegistrationCode)
	} else {
		query = `
			SELECT DISTINCT c.id, c.name 
			FROM courses c
			JOIN schedules s ON s.course_id = c.id
			WHERE s.group_name = ?
			ORDER BY c.name
		`
		args = append(args, user.Group)
	}

	rows, err := db.DB.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var courses []models.Course
	for rows.Next() {
		var course models.Course
		if err := rows.Scan(&course.ID, &course.Name); err != nil {
			return nil, err
		}
		courses = append(courses, course)
	}
	return courses, rows.Err()
}

// GetRelevantLessonTypes –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GetRelevantLessonTypes(user *models.User) ([]string, error) {
	var query string
	var args []interface{}

	if user.Role == "teacher" {
		query = `
			SELECT DISTINCT lesson_type
			FROM schedules
			WHERE teacher_reg_code = ?
			ORDER BY lesson_type
		`
		args = append(args, user.RegistrationCode)
	} else {
		query = `
			SELECT DISTINCT lesson_type
			FROM schedules
			WHERE group_name = ?
			ORDER BY lesson_type
		`
		args = append(args, user.Group)
	}

	rows, err := db.DB.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var lessonTypes []string
	for rows.Next() {
		var lessonType string
		if err := rows.Scan(&lessonType); err != nil {
			return nil, err
		}
		lessonTypes = append(lessonTypes, lessonType)
	}
	return lessonTypes, rows.Err()
}

// ShowFilterMenu –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func ShowFilterMenu(chatID int64, bot *tgbotapi.BotAPI) error {
	// Get user data
	user, err := auth.GetUserByTelegramID(chatID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return sendAndTrackMessage(bot, msg)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
	filter := GetUserFilter(chatID)

	// Get available filter info based on user role
	var availableFilterInfo string
	if user.Role == "teacher" {
		// Check if teacher has any schedules with lesson types
		lessonTypes, err := GetRelevantLessonTypes(user)
		if err == nil && len(lessonTypes) > 0 {
			availableFilterInfo = fmt.Sprintf("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π: %s", strings.Join(lessonTypes, ", "))
		}
	} else {
		// For students, show available lesson types as well
		lessonTypes, err := GetRelevantLessonTypes(user)
		if err == nil && len(lessonTypes) > 0 {
			availableFilterInfo = fmt.Sprintf("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π: %s", strings.Join(lessonTypes, ", "))
		}
	}

	// –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
	var headerText strings.Builder
	headerText.WriteString("üîç <b>–§–∏–ª—å—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n")

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
	if filter.CourseName != "" || filter.LessonType != "" {
		headerText.WriteString("<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n")

		if filter.CourseName != "" {
			headerText.WriteString(fmt.Sprintf("‚Ä¢ üìö –ö—É—Ä—Å: <b>%s</b>\n", filter.CourseName))
		}

		if filter.LessonType != "" {
			headerText.WriteString(fmt.Sprintf("‚Ä¢ üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>%s</b>\n", filter.LessonType))
		}

		headerText.WriteString("\n")
	} else {
		headerText.WriteString("‚ÑπÔ∏è <i>–§–∏–ª—å—Ç—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</i>\n\n")
	}

	// Add available filter info if we found any
	if availableFilterInfo != "" {
		headerText.WriteString("<i>" + availableFilterInfo + "</i>\n\n")
	}

	headerText.WriteString("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")

	// –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìö –§–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä—Å—É", "filter_course_menu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–∏—è", "filter_lesson_type_menu"),
		),
		// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–±—Ä–æ—Å–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", "filter_reset_all"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", "filter_apply"),
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu_schedule"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, headerText.String())
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	return sendAndTrackMessage(bot, msg)
}

// ShowCourseFilterMenu –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
func ShowCourseFilterMenu(chatID int64, bot *tgbotapi.BotAPI) {
	// Get the user
	user, err := auth.GetUserByTelegramID(chatID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		sendAndTrackMessage(bot, msg)
		return
	}

	// Actually use the user variable by calling GetRelevantCoursesForUser
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	courses, err := GetRelevantCoursesForUser(user)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤:", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤")
		sendAndTrackMessage(bot, msg)
		return
	}

	if len(courses) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–í –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫—É—Ä—Å—ã")
		sendAndTrackMessage(bot, msg)
		return
	}

	// –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
	filter := GetUserFilter(chatID)

	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
	headerText := "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
	if filter.CourseName != "" {
		headerText += fmt.Sprintf("–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: <b>%s</b>\n\n", filter.CourseName)
	}
	headerText += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –≤—ã–±–æ—Ä–∞
	for _, course := range courses {
		courseID := fmt.Sprintf("%d", course.ID)
		// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
		buttonText := course.Name
		if filter.CourseID == course.ID {
			buttonText = "‚úÖ " + buttonText
		}

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, "filter_course_"+courseID+"_"+course.Name),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∫—É—Ä—Å–∞", "filter_course_reset"),
	))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", "filter_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, headerText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	sendAndTrackMessage(bot, msg)
}

// ShowLessonTypeFilterMenu –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
func ShowLessonTypeFilterMenu(chatID int64, bot *tgbotapi.BotAPI) error {
	user, err := auth.GetUserByTelegramID(chatID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return sendAndTrackMessage(bot, msg)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	lessonTypes, err := GetRelevantLessonTypes(user)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π:", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π")
		return sendAndTrackMessage(bot, msg)
	}

	if len(lessonTypes) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–í –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π")
		return sendAndTrackMessage(bot, msg)
	}

	// –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
	filter := GetUserFilter(chatID)

	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
	headerText := "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
	if filter.LessonType != "" {
		headerText += fmt.Sprintf("–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: <b>%s</b>\n\n", filter.LessonType)
	}
	headerText += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π:"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –≤—ã–±–æ—Ä–∞
	for _, lessonType := range lessonTypes {
		// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É
		buttonText := lessonType
		if filter.LessonType == lessonType {
			buttonText = "‚úÖ " + buttonText
		}

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, "filter_lesson_type_"+lessonType),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–∏–ø–∞", "filter_lesson_type_reset"),
	))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", "filter_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, headerText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	return sendAndTrackMessage(bot, msg)
}
