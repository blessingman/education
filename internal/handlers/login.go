package handlers

import (
	"fmt"

	"education/internal/auth"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// processLoginMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–∞–ø—ã –ª–æ–≥–∏–Ω–∞:
/*
   1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–¥ ‚Üí LoginStateWaitingForRegCode
   2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –ø–∞—Ä–æ–ª—å ‚Üí LoginStateWaitingForPassword
*/
// processLoginMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–∞–ø—ã –ª–æ–≥–∏–Ω–∞:
/*
   1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–¥ ‚Üí LoginStateWaitingForRegCode
   2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –ø–∞—Ä–æ–ª—å ‚Üí LoginStateWaitingForPassword
*/
// processLoginMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–∞–ø—ã –ª–æ–≥–∏–Ω–∞:
/*
   1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–¥ ‚Üí LoginStateWaitingForRegCode
   2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –ø–∞—Ä–æ–ª—å ‚Üí LoginStateWaitingForPassword
*/
func processLoginMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI, state, text string) {
	chatID := update.Message.Chat.ID

	// –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω–∞ –≤ loginTempDataMap
	ld, ok := loginTempDataMap[chatID]
	if !ok {
		ld = &loginData{}
		loginTempDataMap[chatID] = ld
	}

	switch state {
	case LoginStateWaitingForRegCode:
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ST-456)
		ld.RegCode = text
		loginStates[chatID] = LoginStateWaitingForPassword

		msg := tgbotapi.NewMessage(chatID, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
		sendAndTrackMessage(bot, msg)
		return

	case LoginStateWaitingForPassword:
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–∞—Ä–æ–ª—å
		regCode := ld.RegCode

		// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ –∫–æ–¥—É
		user, err := auth.GetUserByRegCode(regCode)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}
		if user == nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ø—Ä–æ–ø—É—Å–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
			sendAndTrackMessage(bot, msg)
			return
		}

		// –°–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
		if user.Password != text {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			sendAndTrackMessage(bot, msg)
			return
		}

		// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id)
		user.TelegramID = chatID
		if err := auth.SaveUser(user); err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			sendAndTrackMessage(bot, msg)
			return
		}

		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üéâ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s", user.Name))
		sendAndTrackMessage(bot, msg)

		// –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
		deleteMessages(chatID, bot, 6)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		sendMainMenu(chatID, bot, user)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω-—Å–æ—Å—Ç–æ—è–Ω–∏—è
		delete(loginStates, chatID)
		delete(loginTempDataMap, chatID)
		return
	}
}
