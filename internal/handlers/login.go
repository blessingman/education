package handlers

import (
	"fmt"

	"education/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// processLoginMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ (–ª–æ–≥–∏–Ω–∞).
func processLoginMessage(update *tgbotapi.Update, bot *tgbotapi.BotAPI, state, text string) {
	chatID := update.Message.Chat.ID
	ld, ok := loginTempDataMap[chatID]
	if !ok {
		ld = &loginData{MsgIDs: []int{}}
		loginTempDataMap[chatID] = ld
	}

	switch state {
	case LoginStateWaitingForRegCode:
		ld.RegCode = text
		loginStates[chatID] = LoginStateWaitingForPassword
		bot.Send(tgbotapi.NewMessage(chatID, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"))
		return
	case LoginStateWaitingForPassword:
		regCode := ld.RegCode
		user, exists := models.UsersByRegCode[regCode]
		if !exists {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ø—Ä–æ–ø—É—Å–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
			return
		}
		if user.Password != text {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"))
			return
		}

		// –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ models.UsersMap,
		// —á—Ç–æ–±—ã –±–æ—Ç —Å—á–∏—Ç–∞–ª, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É
		models.UsersMap[chatID] = user

		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("üéâ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s", user.Name)))

		delete(loginStates, chatID)
		delete(loginTempDataMap, chatID)
		return
	}
}
