package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"sort"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// GetSchedulesByTeacher –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Schedule.
func GetSchedulesByTeacher(teacherRegCode string) ([]models.Schedule, error) {
	rows, err := db.DB.Query(`
		SELECT
			id,
			course_id,
			group_name,
			teacher_reg_code,
			schedule_time,
			description,
			auditory,
			lesson_type,
			duration
		FROM schedules
		WHERE teacher_reg_code = ?
		ORDER BY schedule_time
	`, teacherRegCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration,
		); err != nil {
			return nil, err
		}
		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

// GetSchedulesByGroup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Schedule.
func GetSchedulesByGroup(group string) ([]models.Schedule, error) {
	rows, err := db.DB.Query(`
		SELECT
			id,
			course_id,
			group_name,
			teacher_reg_code,
			schedule_time,
			description,
			auditory,
			lesson_type,
			duration
		FROM schedules
		WHERE group_name = ?
		ORDER BY schedule_time
	`, group)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration,
		); err != nil {
			return nil, err
		}
		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

// BuildWeekNavigationKeyboardFiltered —Å—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–µ–¥–µ–ª–∏, –æ—Ç–æ–±—Ä–∞–∂–∞—è –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π, –≥–¥–µ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è.
// –ï—Å–ª–∏ –≤ –¥–µ–Ω—å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –∫–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "‚ùå" –∏ callback_data="ignore".
func BuildWeekNavigationKeyboardFiltered(weekStart time.Time, schedules []models.Schedule) tgbotapi.InlineKeyboardMarkup {
	eventDays := make(map[string]bool)
	for _, s := range schedules {
		eventDays[s.ScheduleTime.Format("02.01")] = true
	}

	prevWeek := weekStart.AddDate(0, 0, -7)
	nextWeek := weekStart.AddDate(0, 0, 7)

	var dayRow []tgbotapi.InlineKeyboardButton
	for i := 0; i < 7; i++ {
		day := weekStart.AddDate(0, 0, i)
		dayStr := day.Format("02.01")
		label := dayStr
		if !eventDays[dayStr] {
			label = "‚Äî" + dayStr
		}
		dayRow = append(dayRow, tgbotapi.NewInlineKeyboardButtonData(
			label,
			fmt.Sprintf("day_%s", day.Format("2006-01-02")),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÑ", fmt.Sprintf("week_prev_%s", prevWeek.Format("2006-01-02"))),
			tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è", "week_today"),
			tgbotapi.NewInlineKeyboardButtonData("‚ñ∫", fmt.Sprintf("week_next_%s", nextWeek.Format("2006-01-02"))),
		),
		dayRow,
	)
}

func BuildWeekNavigationKeyboardFilteredWithFilter(weekStart time.Time, schedules []models.Schedule) tgbotapi.InlineKeyboardMarkup {
	// –°—Ç—Ä–æ–∏–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–∫–∞–∫ –≤ BuildWeekNavigationKeyboardFiltered)
	weekKeyboard := BuildWeekNavigationKeyboardFiltered(weekStart, schedules)
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–ø—Ä–∏–º–µ—Ä)
	filterRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–§–∏–ª—å—Ç—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "filter_course_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
		tgbotapi.NewInlineKeyboardButtonData("–§–∏–ª—å—Ç—Ä: –§–∏–∑–∏–∫–∞", "filter_course_–§–∏–∑–∏–∫–∞"),
	)
	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä—è–¥—ã (–Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–π —Ä—è–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
	allRows := weekKeyboard.InlineKeyboard
	allRows = append(allRows, filterRow)
	return tgbotapi.NewInlineKeyboardMarkup(allRows...)
}

func ShowScheduleModeMenu(chatID int64, bot *tgbotapi.BotAPI) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–µ–Ω—å", "mode_day"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–µ–¥–µ–ª—è", "mode_week"),
			// –£–¥–∞–ª—è–µ–º –æ–ø—Ü–∏—é "–ú–µ—Å—è—Ü"
		),
		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –§–∏–ª—å—Ç—Ä—ã", "filter_course_menu"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	return sendAndTrackMessage(bot, msg)
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è BuildCalendarTimeline
func BuildCalendarTimeline(schedules []models.Schedule, day time.Time) string {
	if len(schedules) == 0 {
		return fmt.Sprintf("üìÜ <b>%s</b>\n\nüîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</i>",
			day.Format("02.01.2006")+" ("+weekdayName(day.Weekday())+")")
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
	sort.Slice(schedules, func(i, j int) bool {
		return schedules[i].ScheduleTime.Before(schedules[j].ScheduleTime)
	})

	var sb strings.Builder
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π –∏ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
	sb.WriteString(fmt.Sprintf("üìÜ <b>%s</b>\n\n",
		day.Format("02.01.2006")+" ("+weekdayName(day.Weekday())+")"))

	// –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
	dayStart := day.Truncate(24 * time.Hour)
	dayEnd := dayStart.Add(24 * time.Hour)

	// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
	sb.WriteString("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n")

	seen := make(map[string]bool)
	hasEvents := false

	for _, s := range schedules {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –¥–Ω—é
		if s.ScheduleTime.Before(dayStart) || s.ScheduleTime.After(dayEnd) {
			continue
		}

		hasEvents = true

		// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
		key := fmt.Sprintf("%s-%d-%s-%s-%s-%s",
			s.ScheduleTime.Format("15:04"),
			s.CourseID,
			s.Description,
			s.GroupName,
			s.Auditory,
			s.LessonType,
		)
		if seen[key] {
			continue
		}
		seen[key] = true

		timeStr := s.ScheduleTime.Format("15:04")
		endTimeStr := s.ScheduleTime.Add(time.Duration(s.Duration) * time.Minute).Format("15:04")

		// –ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏
		sb.WriteString(fmt.Sprintf("‚è∞ <b>%s - %s</b> (%d –º–∏–Ω.)\n", timeStr, endTimeStr, s.Duration))
		sb.WriteString(fmt.Sprintf("üìö <b>%s</b>\n", s.Description))
		sb.WriteString(fmt.Sprintf("üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n", s.TeacherRegCode))
		sb.WriteString(fmt.Sprintf("üë• –ì—Ä—É–ø–ø–∞: %s\n", s.GroupName))
		sb.WriteString(fmt.Sprintf("üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: %s\n", s.Auditory))
		sb.WriteString(fmt.Sprintf("üìù –¢–∏–ø: %s\n", s.LessonType))
		sb.WriteString("\n")
	}

	if !hasEvents {
		sb.WriteString("üîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</i>\n")
	}

	return sb.String()
}

// weekdayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
func weekdayName(wd time.Weekday) string {
	switch wd {
	case time.Monday:
		return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
	case time.Tuesday:
		return "–í—Ç–æ—Ä–Ω–∏–∫"
	case time.Wednesday:
		return "–°—Ä–µ–¥–∞"
	case time.Thursday:
		return "–ß–µ—Ç–≤–µ—Ä–≥"
	case time.Friday:
		return "–ü—è—Ç–Ω–∏—Ü–∞"
	case time.Saturday:
		return "–°—É–±–±–æ—Ç–∞"
	case time.Sunday:
		return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
	default:
		return ""
	}
}
