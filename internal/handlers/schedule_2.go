package handlers

import (
	"education/internal/db"
	"education/internal/models"
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// GetSchedulesByTeacher –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Schedule.
func GetSchedulesByTeacher(teacherRegCode string) ([]models.Schedule, error) {
	rows, err := db.DB.Query(`
		SELECT
			id,
			course_id,
			group_name,
			teacher_reg_code,
			schedule_time,
			description,
			auditory,
			lesson_type,
			duration
		FROM schedules
		WHERE teacher_reg_code = ?
		ORDER BY schedule_time
	`, teacherRegCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration,
		); err != nil {
			return nil, err
		}
		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

// GetSchedulesByGroup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Schedule.
func GetSchedulesByGroup(group string) ([]models.Schedule, error) {
	rows, err := db.DB.Query(`
		SELECT
			id,
			course_id,
			group_name,
			teacher_reg_code,
			schedule_time,
			description,
			auditory,
			lesson_type,
			duration
		FROM schedules
		WHERE group_name = ?
		ORDER BY schedule_time
	`, group)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var schedules []models.Schedule
	for rows.Next() {
		var s models.Schedule
		var scheduleTimeStr string
		if err := rows.Scan(
			&s.ID,
			&s.CourseID,
			&s.GroupName,
			&s.TeacherRegCode,
			&scheduleTimeStr,
			&s.Description,
			&s.Auditory,
			&s.LessonType,
			&s.Duration,
		); err != nil {
			return nil, err
		}
		s.ScheduleTime, err = time.Parse(time.RFC3339, scheduleTimeStr)
		if err != nil {
			return nil, err
		}
		schedules = append(schedules, s)
	}
	return schedules, rows.Err()
}

// BuildWeekNavigationKeyboardFiltered —Å—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–µ–¥–µ–ª–∏, –æ—Ç–æ–±—Ä–∞–∂–∞—è –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π, –≥–¥–µ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è.
// –ï—Å–ª–∏ –≤ –¥–µ–Ω—å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –∫–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "‚ùå" –∏ callback_data="ignore".
func BuildWeekNavigationKeyboardFiltered(weekStart time.Time, schedules []models.Schedule) tgbotapi.InlineKeyboardMarkup {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è
	eventDays := make(map[string]bool)
	for _, s := range schedules {
		dayStr := s.ScheduleTime.Format("2006-01-02")
		eventDays[dayStr] = true
	}

	// –î–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
	prevWeek := weekStart.AddDate(0, 0, -7)
	nextWeek := weekStart.AddDate(0, 0, 7)

	// –ö–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è -1 –Ω–µ–¥" –∏ "+1 –Ω–µ–¥ ‚û°Ô∏è"
	navRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è -1 –Ω–µ–¥", fmt.Sprintf("week_prev_%s", prevWeek.Format("2006-01-02"))),
		tgbotapi.NewInlineKeyboardButtonData("+1 –Ω–µ–¥ ‚û°Ô∏è", fmt.Sprintf("week_next_%s", nextWeek.Format("2006-01-02"))),
	)

	// –°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π: –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–±, –í—Å
	dayNames := []string{"–ü", "–í", "–°", "–ß", "–ü", "–°", "–í"}

	var dayRow []tgbotapi.InlineKeyboardButton
	for i := 0; i < 7; i++ {
		day := weekStart.AddDate(0, 0, i)
		dayStr := day.Format("2006-01-02")

		// –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è ‚Äì –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –∏–Ω–∞—á–µ "‚ùå"
		if eventDays[dayStr] {
			dayLabel := fmt.Sprintf("%s %s", dayNames[i], day.Format("02"))
			dayRow = append(dayRow, tgbotapi.NewInlineKeyboardButtonData(dayLabel, fmt.Sprintf("day_%s", dayStr)))
		} else {
			dayLabel := fmt.Sprintf("‚ùå%s", dayNames[i])
			dayRow = append(dayRow, tgbotapi.NewInlineKeyboardButtonData(dayLabel, "ignore"))
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(navRow, dayRow)
	return keyboard
}

func BuildWeekNavigationKeyboardFilteredWithFilter(weekStart time.Time, schedules []models.Schedule) tgbotapi.InlineKeyboardMarkup {
	// –°—Ç—Ä–æ–∏–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–∫–∞–∫ –≤ BuildWeekNavigationKeyboardFiltered)
	weekKeyboard := BuildWeekNavigationKeyboardFiltered(weekStart, schedules)
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–ø—Ä–∏–º–µ—Ä)
	filterRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–§–∏–ª—å—Ç—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "filter_course_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
		tgbotapi.NewInlineKeyboardButtonData("–§–∏–ª—å—Ç—Ä: –§–∏–∑–∏–∫–∞", "filter_course_–§–∏–∑–∏–∫–∞"),
	)
	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä—è–¥—ã (–Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–π —Ä—è–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
	allRows := weekKeyboard.InlineKeyboard
	allRows = append(allRows, filterRow)
	return tgbotapi.NewInlineKeyboardMarkup(allRows...)
}

func ShowScheduleModeMenu(chatID int64, bot *tgbotapi.BotAPI) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–µ–Ω—å", "mode_day"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–µ–¥–µ–ª—è", "mode_week"),
			tgbotapi.NewInlineKeyboardButtonData("–ú–µ—Å—è—Ü", "mode_month"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard
	return sendAndTrackMessage(bot, msg)
}

func BuildMinimalTimeline(slots []string, currentTime time.Time, events map[string]string) string {
	// slots ‚Äì –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: ["08:00", "10:00", "12:00", "14:00", "16:00", "18:00"]
	// events ‚Äì –∫–∞—Ä—Ç–∞: –∫–ª—é—á ‚Äì –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "08:00"), –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ò–≤–∞–Ω–æ–≤)")
	// currentTime ‚Äì —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

	// –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
	timeline := "‚è∞ "
	for _, slot := range slots {
		timeline += fmt.Sprintf("%-12s", slot)
	}

	// –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –ª–∏–Ω–∏—è —Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
	line := ""
	// –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç –ª–∏–Ω–∏–µ–π: –µ—Å–ª–∏ –≤ —Å–ª–æ—Ç–µ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ ‚Äì –æ–±—ã—á–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äì –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç.
	for i, slot := range slots {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º —Å–ª–æ—Ç–æ–º –∏ —Å–ª–µ–¥—É—é—â–∏–º
		var marker string
		// –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ (–≤ events) ‚Äî —Å—Ç–∞–≤–∏–º –∫–≤–∞–¥—Ä–∞—Ç,
		// –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é.
		if _, ok := events[slot]; ok {
			marker = "üî≤"
		} else {
			marker = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
		}

		// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.
		if i < len(slots)-1 {
			t1, err1 := time.Parse("15:04", slot)
			t2, err2 := time.Parse("15:04", slots[i+1])
			if err1 == nil && err2 == nil {
				// –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫ —Å–ª–æ—Ç—É
				t1 = time.Date(currentTime.Year(), currentTime.Month(), currentTime.Day(), t1.Hour(), t1.Minute(), 0, 0, currentTime.Location())
				t2 = time.Date(currentTime.Year(), currentTime.Month(), currentTime.Day(), t2.Hour(), t2.Minute(), 0, 0, currentTime.Location())
				if currentTime.After(t1) && currentTime.Before(t2) {
					marker = "üî≥"
				}
			}
		}
		line += fmt.Sprintf("%-12s", marker)
	}

	// –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
	eventsLine := ""
	for _, slot := range slots {
		if ev, ok := events[slot]; ok {
			eventsLine += fmt.Sprintf("%-12s", ev)
		} else {
			eventsLine += fmt.Sprintf("%-12s", "")
		}
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ
	var nextSlot string
	for _, slot := range slots {
		t, err := time.Parse("15:04", slot)
		if err != nil {
			continue
		}
		t = time.Date(currentTime.Year(), currentTime.Month(), currentTime.Day(), t.Hour(), t.Minute(), 0, 0, currentTime.Location())
		if currentTime.Before(t) {
			nextSlot = slot
			break
		}
	}
	var remaining string
	if nextSlot != "" {
		tNext, _ := time.Parse("15:04", nextSlot)
		tNext = time.Date(currentTime.Year(), currentTime.Month(), currentTime.Day(), tNext.Hour(), tNext.Minute(), 0, 0, currentTime.Location())
		minutesLeft := int(tNext.Sub(currentTime).Minutes())
		remaining = fmt.Sprintf("–°–µ–π—á–∞—Å: %s (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å %d –º–∏–Ω.)", currentTime.Format("15:04"), minutesLeft)
	} else {
		remaining = fmt.Sprintf("–°–µ–π—á–∞—Å: %s", currentTime.Format("15:04"))
	}

	result := timeline + "\n" + line + "\n" + eventsLine + "\n\n" + remaining
	return result
}

// weekdayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
func weekdayName(wd time.Weekday) string {
	switch wd {
	case time.Monday:
		return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
	case time.Tuesday:
		return "–í—Ç–æ—Ä–Ω–∏–∫"
	case time.Wednesday:
		return "–°—Ä–µ–¥–∞"
	case time.Thursday:
		return "–ß–µ—Ç–≤–µ—Ä–≥"
	case time.Friday:
		return "–ü—è—Ç–Ω–∏—Ü–∞"
	case time.Saturday:
		return "–°—É–±–±–æ—Ç–∞"
	case time.Sunday:
		return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
	default:
		return ""
	}
}
