package handlers

import (
	"education/internal/models"
	"fmt"
	"sort"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ShowEnhancedScheduleDay shows an enhanced version of the daily schedule
func ShowEnhancedScheduleDay(chatID int64, bot *tgbotapi.BotAPI, user *models.User, day time.Time) error {
	dayStart := day.Truncate(24 * time.Hour)
	dayEnd := dayStart.Add(24*time.Hour - time.Second)

	var schedules []models.Schedule
	var err error
	if user.Role == "teacher" {
		schedules, err = GetSchedulesForTeacherByDateRange(user.RegistrationCode, dayStart, dayEnd)
	} else {
		schedules, err = GetSchedulesForGroupByDateRange(user.Group, dayStart, dayEnd)
	}
	if err != nil {
		return err
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
	filter := GetUserFilter(chatID)
	filteredSchedules := ApplyFilters(schedules, filter)

	text := FormatEnhancedDaySchedule(filteredSchedules, day, user.Role)

	// Add navigation buttons for previous/next day
	prevDay := day.AddDate(0, 0, -1)
	nextDay := day.AddDate(0, 0, 1)

	// –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	navRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ü—Ä–µ–¥. –¥–µ–Ω—å", fmt.Sprintf("day_%s", prevDay.Format("2006-01-02"))),
		tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è", "mode_day"),
		tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥. –¥–µ–Ω—å ‚ñ∂Ô∏è", fmt.Sprintf("day_%s", nextDay.Format("2006-01-02"))),
	)

	// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
	modeKeyboard := BuildModeSwitchKeyboard("mode_day")

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
	filterRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "filter_menu"),
	)

	// –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if filter.CourseName != "" || filter.LessonType != "" {
		text += "\n\n<b>üìå –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
		if filter.CourseName != "" {
			text += fmt.Sprintf("‚Ä¢ –ö—É—Ä—Å: <b>%s</b>\n", filter.CourseName)
		}
		if filter.LessonType != "" {
			text += fmt.Sprintf("‚Ä¢ –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>%s</b>\n", filter.LessonType)
		}
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫
	var allRows [][]tgbotapi.InlineKeyboardButton
	allRows = append(allRows, navRow)
	allRows = append(allRows, modeKeyboard.InlineKeyboard...)
	allRows = append(allRows, filterRow)

	enhancedKeyboard := tgbotapi.NewInlineKeyboardMarkup(allRows...)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = enhancedKeyboard
	return sendAndTrackMessage(bot, msg)
}

// FormatEnhancedDaySchedule creates a beautifully formatted day schedule
func FormatEnhancedDaySchedule(schedules []models.Schedule, day time.Time, role string) string {
	if len(schedules) == 0 {
		return fmt.Sprintf("üìÜ <b>%s</b>\n\nüîç <i>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</i>",
			day.Format("02.01.2006")+" ("+weekdayName(day.Weekday())+")")
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
	sort.Slice(schedules, func(i, j int) bool {
		return schedules[i].ScheduleTime.Before(schedules[j].ScheduleTime)
	})

	var sb strings.Builder
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π –∏ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
	sb.WriteString(fmt.Sprintf("üìÜ <b>%s</b>\n\n",
		day.Format("02.01.2006")+" ("+weekdayName(day.Weekday())+")"))

	// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
	sb.WriteString("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n")

	// –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π
	lessonCount := 0

	for _, s := range schedules {
		lessonCount++
		timeStr := s.ScheduleTime.Format("15:04")
		endTimeStr := s.ScheduleTime.Add(time.Duration(s.Duration) * time.Minute).Format("15:04")

		// –ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
		sb.WriteString(fmt.Sprintf("üìå <b>–ó–∞–Ω—è—Ç–∏–µ %d</b>\n", lessonCount))
		sb.WriteString(fmt.Sprintf("‚è∞ <b>%s - %s</b> (%d –º–∏–Ω.)\n", timeStr, endTimeStr, s.Duration))
		sb.WriteString(fmt.Sprintf("üìö <b>%s</b>\n", s.Description))

		if role == "teacher" {
			sb.WriteString(fmt.Sprintf("üë• –ì—Ä—É–ø–ø–∞: %s\n", s.GroupName))
		} else {
			sb.WriteString(fmt.Sprintf("üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n", s.TeacherRegCode))
		}

		sb.WriteString(fmt.Sprintf("üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: %s\n", s.Auditory))
		sb.WriteString(fmt.Sprintf("üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: %s\n", s.LessonType))

		// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–Ω—è—Ç–∏—è–º–∏
		sb.WriteString("\n")
	}

	// –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	sb.WriteString(fmt.Sprintf("üî¢ <b>–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: %d</b>\n", lessonCount))

	// –ù–∞—Ö–æ–¥–∏–º –æ–±—â—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π
	var totalDuration int
	for _, s := range schedules {
		totalDuration += s.Duration
	}
	sb.WriteString(fmt.Sprintf("‚åõ <b>–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –º–∏–Ω (%d —á %d –º–∏–Ω)</b>\n\n",
		totalDuration, totalDuration/60, totalDuration%60))

	sb.WriteString("‚ú® <i>–ü—É—Å—Ç—å –¥–µ–Ω—å –ø—Ä–æ–π–¥–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ!</i>")

	return sb.String()
}
